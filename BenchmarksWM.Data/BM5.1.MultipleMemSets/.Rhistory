expRIDev = subset(expRI, select= c(id, session, serpos, RI, tarRI, diffabs)) # temp iso
expRISDev = subset(expRIS, select = c(id, session, serpos, RI, tarRI, diffabs)) # temp Iso short, with serpos
expTIDev = subset(expRI, select = c(id,session, RI, tarRI, diffabs)) # temp iso without serpos
expTISDev = subset(expRIS, select = c(id, session, RI, tarRI, diffabs)) # temp is short without serpos
expITIDevpre = subset(expITI, select= c(id, session, itipre, tarpre, diffabspre)) # temp iso pre
expITIDevpost = subset(expITI, select= c(id, session, itipost, tarpost, diffabspost)) # temp iso post
expITIDev = cbind(expITIDevpre,expITIDevpost)
expITIDev = expITIDev[c(-(6:7))]
# mean for each participant aggregate #######################################################################################################
# new data sets
expSPmDev = aggregate(x=expSPDev$diffabs, by = list(expSPDev$id, expSPDev$serpos, expSPDev$session), FUN = "mean")
expRISmDev = aggregate(x=expRISDev$diffabs, by = list(expRISDev$id, expRISDev$serpos, expRISDev$RI, expRISDev$session), FUN = "mean")
expITImDevpre = aggregate(x=expITIDevpre$diffabspre, by = list(expITIDevpre$id, expITIDevpre$itipre, expITIDevpre$session), FUN = "mean", na.action = na.exclude)
expITImDevpost = aggregate(x=expITIDevpost$diffabspost, by = list(expITIDevpost$id, expITIDevpost$itipost, expITIDevpost$session), FUN = "mean", na.action = na.exclude)
expTImDev = aggregate(x=expTIDev$diffabs, by = list(expTIDev$id, expTIDev$RI, expTIDev$session), FUN = "mean")
expTISmDev = aggregate(x=expTISDev$diffabs, by = list(expTISDev$id, expTISDev$RI, expTISDev$session), FUN = "mean")
expRImDev = aggregate(x=expRIDev$diffabs, by = list(expRIDev$id, expRIDev$serpos, expRIDev$RI, expRIDev$session), FUN = "mean")
expITImDev = cbind(expITImDevpre, expITImDevpost)
expITImDev = expITImDev[c(-(5:7))]
rm(expITImDevpre,expITImDevpost)
rm(expITIDevpre,expITIDevpost)
names(expSPmDev) = c("id", "serpos", "session", "Deviation") # SerialPosition = serpos
names(expRImDev) = c("id", "serpos", "TempIso", "session", "Deviation") # RetentionInt = TempIso
names(expRISmDev) = c("id", "serpos", "TempIsoS", "session", "Deviation")
names(expITImDev) = c("id", "iti", "session", "Deviationpre", "Deviationpost")
names(expTImDev) = c("id", "TempIso", "session", "Deviation")
names(expTISmDev) = c("id", "TempIso", "session", "Deviation")
uniqueTempIso <- unique(expTImDev$TempIso)
cut6 <- uniqueTempIso[seq(1,length(uniqueTempIso),length.out=7)]
h6 <- hist(expTImDev$TempIso, breaks=cut6)
cut6[1] <- cut6[1] - 0.0001
expTImDev$TempIso <- as.numeric(cut(expTImDev$TempIso, breaks=(cut6)))
cut4 <- uniqueTempIso[seq(1,length(uniqueTempIso),length.out=5)]
h4 <- hist(expTISmDev$TempIso, breaks=cut4)
cut4[1] <- cut4[1] - 0.0001
expTISmDev$TempIso <- as.numeric(cut(expTISmDev$TempIso, breaks=(cut4)))
##########################################################################################################################################
####################################### Bayesian Linear Modeling #########################################################################
##########################################################################################################################################
# JSZ Prior
r = 1/sqrt(2)   #scale for fixed-effect prior set to 1/sqrt(2) (for the same effect, set rscaleFixed = "wide")
########################################### Serial Position #################################################################################
# data: expSPmDev
# set up variables
expSPmDev$centSession <- as.numeric(expSPmDev$session)
expSPmDev$centSerpos <- as.numeric(expSPmDev$serpos)
expSPmDev$centSession <- expSPmDev$centSession - mean(expSPmDev$centSession) #center on zero
expSPmDev$centSerpos <- expSPmDev$centSerpos - mean(expSPmDev$centSerpos)
expSPmDev$Deviation <- as.numeric(expSPmDev$Deviation)
expSPmDev$id <- as.factor(expSPmDev$id)
# Bayesian LM comparing session and serpos, random = id, DV = Deviation
# all models against nullmodel
# best model/second best model
# interaction/full model
# full model/first main effect (session)
# full model/sec main effect (serpos)
# all models, starting with full (KO)
bfSP.full <- lmBF(Deviation ~ session * serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfSP.main <- lmBF(Deviation ~ session + serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfSP.session <- lmBF(Deviation ~ session + session:serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfSP.serpos <- lmBF(Deviation ~ serpos + session:serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
BFSP.inter <- bfSP.full/bfSP.main
BFSP.serpos <- bfSP.full/bfSP.session
BFSP.session <- bfSP.full/bfSP.serpos
# lmBFs (Sonja's solution - equivalent to KO's)
SP <- lmBF(Deviation ~ session * serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviation ~ session + session:serpos + id, data = expSPmDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
COsp <- lmBF(Deviation ~ session * serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviation ~ serpos + session:serpos + id, data = expSPmDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
INTsp <- lmBF(Deviation ~ session * serpos + id, data = expSPmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviation ~ session + serpos + id, data = expSPmDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
########################################### temporal Isolation ###############################################################################
# data: expTISmDev, expITImDev
# set up Variables
expTISmDev$session <- as.numeric(expTISmDev$session)
expTISmDev$TempIso <- as.numeric(expTISmDev$TempIso)
expTISmDev$Deviation <- as.numeric(expTISmDev$Deviation)
expTISmDev$session <- expTISmDev$session - mean(expTISmDev$session, na.rm = TRUE)
expTISmDev$TempIso <- expTISmDev$TempIso - mean(expTISmDev$TempIso, na.rm = TRUE)
expTISmDev$id <- as.factor(expTISmDev$id)
expITImDev$session <- as.numeric(expITImDev$session)
expITImDev$iti <- as.numeric(expITImDev$iti)
expITImDev$Deviationpre <- as.numeric(expITImDev$Deviationpre)
expITImDev$Deviationpost <- as.numeric(expITImDev$Deviationpost)
expITImDev$id <- expITImDev$id - mean(expITImDev$id, na.rm = TRUE)
expITImDev$session <- expITImDev$session - mean(expITImDev$session, na.rm = TRUE)
expITImDev$iti <- expITImDev$iti - mean(expITImDev$iti, na.rm = TRUE)
expITImDev$id <- as.factor(expITImDev$id)
bfTD.full <- lmBF(Deviation ~ session * TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000)
bfTD.main <- lmBF(Deviation ~ session + TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000)
bfTD.session <- lmBF(Deviation ~ session + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000)
bfTD.Tiso <- lmBF(Deviation ~ TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000)
BFTD.inter <- bfTD.full/bfTD.main
BFTD.session <- bfTD.main/bfTD.Tiso
BFTD.iso <- bfTD.main/bfTD.session
##### PRE
# all models, top down (KO)
bfpre.full <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpre.main <- lmBF(Deviationpre ~ session + iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpre.session <- lmBF(Deviationpre ~ session + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpre.iti <- lmBF(Deviationpre ~ iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
BFpre.inter <- bfpre.full/bfpre.main
BFpre.session <- bfpre.main/bfpre.iti
BFpre.iti <- bfpre.main/bfpre.session
##### POST
# all models top down (KO)
bfpost.full <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpost.main <- lmBF(Deviationpost ~ session + iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpost.session <- lmBF(Deviationpost ~ session + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpost.iti <- lmBF(Deviationpost ~ iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
BFpost.inter <- bfpost.full/bfpost.main
BFpost.session <- bfpost.main/bfpost.iti
BFpost.iti <- bfpost.main/bfpost.session
##### lmBFs (Sonja's solution)
TI <- lmBF(Deviation ~ session * TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviation ~ session + session:TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )
COti <- lmBF(Deviation ~ session * TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviation ~ TempIso + session:TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )
INTti <- lmBF(Deviation ~ session * TempIso + id, data = expTISmDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviation ~ session + TempIso + id, data = expTISmDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
TIpre <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpre ~ session + session:iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000)
COpre <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpre ~ iti + session:iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
INTpre <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpre ~ session + iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
TIpo <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpost ~ session + session:iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
COpo <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpost ~ iti + session:iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
INTpo <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpost ~ session + iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
SP
COsp
INTsp
TI
COti
INTti
TIpre
COpre
INTpre
TIpo
COpo
INTpo
bfmaxSP.full <- lmBF(Deviation ~ session * serpos + id + session:id + serpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.main <- lmBF(Deviation ~ session + serpos + id + session:id + serpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.session <- lmBF(Deviation ~ session + session:serpos + id + session:id + serpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.serpos <- lmBF(Deviation ~ serpos + session:serpos + id + session:id + serpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
BFSPmax.inter <- bfSPmax.full/bfSPmax.main
BFSPmax.serpos <- bfSPmax.full/bfSPmax.session
BFSPmax.session <- bfSPmax.full/bfSPmax.serpos
head(expSPDev)
mean(1:5)
unique(expSPDev$session)
expSPDev$cserpos <- expSPDev$serpos-mean(1:5)
expSPDev$csession <- expSPDev$session-mean(1:2)
bfmaxSP.full <- lmBF(diffabs ~ csession * cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.main <- lmBF(diffabs~ csession + cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.session <- lmBF(diffabs ~ csession + csession:cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.serpos <- lmBF(diffabs ~ cserpos + csession:cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
BFSPmax.inter <- bfSPmax.full/bfSPmax.main
BFSPmax.serpos <- bfSPmax.full/bfSPmax.session
BFSPmax.session <- bfSPmax.full/bfSPmax.serpos
expSPDev$cserpos <- expSPDev$serpos-mean(1:5)
expSPDev$csession <- expSPDev$session-mean(1:2)
expSPDev$id <- as.factor(expSPDev$id)
bfmaxSP.full <- lmBF(diffabs ~ csession * cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.main <- lmBF(diffabs~ csession + cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.session <- lmBF(diffabs ~ csession + csession:cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.serpos <- lmBF(diffabs ~ cserpos + csession:cserpos + id + csession:id + cserpos:id, data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
BFSPmax.inter <- bfSPmax.full/bfSPmax.main
BFSPmax.serpos <- bfSPmax.full/bfSPmax.session
BFSPmax.session <- bfSPmax.full/bfSPmax.serpos
bfmaxSP.full
bfmaxSP.main
View(expSPDev)
is.numeric(expSPDev$csession)
is.numeric(expSPDev$cserpos)
is.numeric(expSPDev$diffabs)
is.numeric(expSPDev$id)
hist(expSPDev$diffabs)
bfmaxSP.test <- lmBF(diffabs ~ csession * cserpos + id , data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
bfmaxSP.test
bfmaxSP.test <- lmBF(diffabs ~ csession * cserpos + id + csession:id , data = expSPDev, whichRandom ="id", rscaleFixed=r, iterations=20000, progress=TRUE)
SP
COsp
INTsp
TI
COti
INTti
TIpre
COpre
INTpre
TIpo
COpo
INTpo
TIpre <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpre ~ session + session:iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000)
COpre <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpre ~ iti + session:iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
INTpre <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpre ~ session + iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
TIpo <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpost ~ session + session:iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
COpo <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpost ~ iti + session:iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
INTpo <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000 )/lmBF(Deviationpost ~ session + iti + id, data = expITImDev, whichRandom = "id", rscaleFixed=r, iterations=200000)
TIpre
COpre
TIpo
BFpre.iti
BFpost.iti
bfpre.full <- lmBF(Deviationpre ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpre.main <- lmBF(Deviationpre ~ session + iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpre.session <- lmBF(Deviationpre ~ session + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpre.iti <- lmBF(Deviationpre ~ iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
BFpre.inter <- bfpre.full/bfpre.main
BFpre.session <- bfpre.main/bfpre.iti
BFpre.iti <- bfpre.main/bfpre.session
##### POST
# all models top down (KO)
bfpost.full <- lmBF(Deviationpost ~ session * iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpost.main <- lmBF(Deviationpost ~ session + iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpost.session <- lmBF(Deviationpost ~ session + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
bfpost.iti <- lmBF(Deviationpost ~ iti + id, data = expITImDev, whichRandom ="id", rscaleFixed=r, iterations=200000, progress=TRUE)
BFpost.inter <- bfpost.full/bfpost.main
BFpost.session <- bfpost.main/bfpost.iti
BFpost.iti <- bfpost.main/bfpost.session
BFpre.iti
BFpost.iti
TIpre
COpre
INTpre
TIpo
COpo
INTpo
#Hierarchical Interference Measurement Model and 3-parameter Mixture Model applied to Sonja's Serial-Recall Experiment
rm(list=ls(all=TRUE))
graphics.off()
#library(bigmemory)
library(circular)
library(rjags)
library(coda)
load.module("vonmises")
load.module("dic")
#memory.limit(size=20000)  # increase memory limit to avoid crash
### Decisions
Source <- 3  # 1 = experiment, 2 = SIMPLE, 3 = SOB-CS
SPselection <- 1:5
Model <- 1 #1 = full IMM, 2 = BsC, 3 = ABC,
Ctx   <- 1 #1 = position, 2 = time
postpred <- 0
diags <- 1 #0 = none, 1 = Gelman-Rubin Rhat
computer <- 2  #1 = apk-server, 2 = laptop
if (computer == 1) homedir <- "C:\\apk2-home\\"
if (computer == 2) homedir <- "C:\\Daten\\R\\"
### Set path & get data #######################################################################################################################
if (computer == 1) setwd(paste(homedir, "Bayes\\Colorwheel.TD.Sonja\\", sep=""))
if (Source == 1) {
if (computer == 2) setwd("C:\\Daten\\Rohdaten\\VisWM\\Colorwheel.TD.Sonja")
data <- read.table("serRecCol_expDataLONG.dat", header = F, dec = ".")
names(data)= c("id", "session", "trial", "serpos", "iti1", "iti2", "iti3", "iti4", "RI1", "RI2", "RI3",
"perf", "tarSP", "tar1", "tar2", "tar3", "tar4", "tar5", "res1", "res2", "res3", "res4", "res5",
"diff", "resp", "rtime")
}
if (Source == 2) {
if (computer == 2) setwd("C:\\GenWM\\SOB-CS\\SOB.Colorwheel.TD\\Preprocessing.SIMPLE")
data <- read.table("SIMPLE.serRecCol_expDataLONG.dat", header = F, dec = ".")
names(data)= c("id", "session", "trial", "serpos", "iti1", "iti2", "iti3", "iti4", "RI1", "RI2", "RI3",
"perf", "tarSP", "tar1", "tar2", "tar3", "tar4", "tar5", "res1", "res2", "res3", "res4", "res5",
"diff", "resp")
data$rtime <- 13.2 # average response time
}
if (Source == 3) {
if (computer == 2) setwd("C:\\GenWM\\SOB-CS\\SOB.Colorwheel.TD\\Preprocessing.SOB")
data <- read.table("SOB.serRecCol_expDataLONG.dat", header = F, dec = ".")
names(data)= c("id", "session", "trial", "serpos", "iti1", "iti2", "iti3", "iti4", "RI1", "RI2", "RI3",
"perf", "tarSP", "tar1", "tar2", "tar3", "tar4", "tar5", "res1", "res2", "res3", "res4", "res5",
"diff", "resp")
data$rtime <- 13.2 - 5*0.3 - sum(c(data$iti1[1], data$iti2[1], data$iti3[1], data$iti4[1])) - 0.1 # average response time
}
data$rtime
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
dd <- subset(Dev.CIs, session=="Silent")
x <- as.numeric(levels(dd$TempIso))
xlim <- c(min(x)-0.01, max(x)+0.01)
errbar(x, y=dd$Deviation_norm, yplus=dd$Deviation_norm+dd$ci, yminus=dd$Deviation_norm - dd$ci, type="b", pch=21,
bg="black", errbar.col="black", xlim=xlim, ylim=Ylim, xlab="Temporal Isolation", ylab=ydegree)
par(new=T)
dd <- subset(Dev.CIs, session=="AS")
errbar(x, y=dd$Deviation_norm, yplus=dd$Deviation_norm+dd$ci, yminus=dd$Deviation_norm - dd$ci, type="b", pch=22,
bg="white", errbar.col="black", xlim=xlim, ylim=Ylim, xlab="Temporal Isolation", ylab=ydegree)
axis.break(2,.19,style="slash")
legend(min(xlim), 0, c("Silent", "AS"), pch=c(21,22), pt.bg=c("black", "white"), yjust=0)
title(maintext)
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
library("plotrix")
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
#############################################################################################################################################
######################################    Serial Recall with Colors Data Analysis   #########################################################
#############################################################################################################################################
### New Plots by KO ###
graphics.off()
rm(list=ls(all=TRUE))
packages = c("ggplot2",  "plyr", "Hmisc")
sapply(packages, library, character.only = TRUE)
setwd("C:\\Daten\\R\\Bayes\\VisWM\\Colorwheel.TD.Sonja")
# source CI functions #######################################################################################################################
# Adding the function to compute means and within-subjects CIs from the data
source(paste(getwd(), "/helper_functions/summarySEwithin.R", sep=""))
source(paste(getwd(), "/helper_functions/summarySE.R", sep=""))
source(paste(getwd(), "/helper_functions/normDataWithin.R", sep=""))
# Set path & get data #######################################################################################################################
Source <- 1 # 1 = experiment, 2 = SIMPLE, 3 = SOB-CS
Model <- 1 #1 = full IMM, 2 = BsC, 3 = ABC,
Ctx   <- 1 #1 = position, 2 = time
if (Source == 1) {
setwd("C:\\Daten\\Rohdaten\\VisWM\\Colorwheel.TD.Sonja")
maintext = "Experiment"
Prescript = ""
}
if (Source == 2) {
setwd("C:\\GenWM\\SOB-CS\\SOB.Colorwheel.TD\\Preprocessing.SIMPLE")
maintext = "SIMPLE"
Prescript = "SIMPLE."
}
if (Source == 3) {
setwd("C:\\GenWM\\SOB-CS\\SOB.Colorwheel.TD\\Preprocessing.SOB")
maintext = "SOB-CS"
Prescript = "SOB."
}
# data
expSP=read.table(paste(Prescript, "serRecCol_expDataLONG.dat", sep=""), header = F, dec = ".")
expRI=read.table(paste(Prescript, "serRecCol_expDataSHORT.dat", sep=""), header = F, dec = ".")
expRIS=read.table(paste(Prescript, "serRecCol_expDataSHORT_RI.dat", sep=""), header = F, dec = ".")
expITIpre=read.table(paste(Prescript, "serRecCol_expDataPRE.dat", sep=""), header = F, dec = ".")
expITIpost=read.table(paste(Prescript, "serRecCol_expDataPOST.dat", sep=""), header = F, dec = ".")
expLM=read.table(paste(Prescript, "serRecCol_expDataLM.dat", sep=""), header = F, dec = ".")
# name them
names(expSP)= c("id", "session", "trial", "serpos", "iti1", "iti2", "iti3", "iti4", "RI1", "RI2", "RI3", "perf", "tarSP", "tar1", "tar2", "tar3", "tar4", "tar5", "res1", "res2", "res3", "res4", "res5", "diff", "resp")
if (Source == 1) names(expSP)[dim(expSP)[2]] <- "rtime"
names(expRI)= c("id", "session", "trial", "serpos", "iti1", "iti2", "iti3", "iti4", "perf", "tarRI", "tar1", "tar2", "tar3", "tar4", "tar5", "res1", "res2", "res3", "res4", "res5", "diff", "resp", "RI")
names(expRIS)= c("id", "session", "trial", "serpos", "iti1", "iti2", "iti3", "iti4", "perf", "tarRI", "tar1", "tar2", "tar3", "tar4", "tar5", "res1", "res2", "res3", "res4", "res5", "diff", "resp", "RI")
names(expITIpre)= c("id", "session", "trial", "serposPre", "RI1pre", "RI2pre", "RI3pre", "perfpre", "tarpre", "tar1pre", "tar2pre", "tar3pre", "tar4pre", "tar5pre", "res1pre", "res2pre", "res3pre", "res4pre", "res5pre", "diffpre", "resppre", "itipre")
names(expITIpost)= c("id", "session", "trial", "serposPost","RI1post", "RI2post", "RI3post","perfpost", "tarpost", "tar1post", "tar2post", "tar3post", "tar4post", "tar5post", "res1post", "res2post", "res3post", "res4post", "res5post", "diffpost", "resppost", "itipost")
names(expLM)= c("id", "session", "trial", "serpos", "Ri1", "Ri2", "Ri3", "perf", "target", "tar1", "tar2", "tar3", "tar4", "tar5", "resp1", "resp2", "resp3", "resp4", "resp5","diff", "resppost","itipre", "itipost","diffabs")
expITI <- cbind(expITIpre, expITIpost)
rm(expITIpre, expITIpost)
expITI = expITI[c(-(23:25))]
setwd("C:\\Daten\\R\\Bayes\\VisWM\\Colorwheel.TD.Sonja")
########################### Data Pre-Processing #############################################################################################
# Computing Mean Deviation  #########################################################################################################
# compute the absolute difference between response and target color
expSP$diffabs = abs(expSP$diff)
expITI$diffabspre = abs(expITI$diffpre)
expITI$diffabspost = abs(expITI$diffpost)
expRI$diffabs = abs(expRI$diff)
expRIS$diffabs = abs(expRIS$diff)
# take only the variables we are interested for this analysis
# new data sets
expSPDev = subset(expSP, select= c(id, session, serpos, tarSP, diffabs)) # serpos
expRIDev = subset(expRI, select= c(id, session, serpos, RI, tarRI, diffabs)) # temp iso
expRISDev = subset(expRIS, select = c(id, session, serpos, RI, tarRI, diffabs)) # temp Iso short, with serpos
expTIDev = subset(expRI, select = c(id,session, RI, tarRI, diffabs)) # temp iso without serpos
expTISDev = subset(expRIS, select = c(id, session, RI, tarRI, diffabs)) # temp is short without serpos
expITIDevpre = subset(expITI, select= c(id, session, itipre, tarpre, diffabspre)) # temp iso pre
expITIDevpost = subset(expITI, select= c(id, session, itipost, tarpost, diffabspost)) # temp iso post
expITIDev = cbind(expITIDevpre,expITIDevpost)
expITIDev = expITIDev[c(-(6:7))]
# mean for each participant aggregate #######################################################################################################
# new data sets
expSPmDev = aggregate(x=expSPDev$diffabs, by = list(expSPDev$id, expSPDev$serpos, expSPDev$session), FUN = "mean")
expRISmDev = aggregate(x=expRISDev$diffabs, by = list(expRISDev$id, expRISDev$serpos, expRISDev$RI, expRISDev$session), FUN = "mean")
expITImDevpre = aggregate(x=expITIDevpre$diffabspre, by = list(expITIDevpre$id, expITIDevpre$itipre, expITIDevpre$session), FUN = "mean", na.action = na.exclude)
expITImDevpost = aggregate(x=expITIDevpost$diffabspost, by = list(expITIDevpost$id, expITIDevpost$itipost, expITIDevpost$session), FUN = "mean", na.action = na.exclude)
expTImDev = aggregate(x=expTIDev$diffabs, by = list(expTIDev$id, expTIDev$RI, expTIDev$session), FUN = "mean")
expTISmDev = aggregate(x=expTISDev$diffabs, by = list(expTISDev$id, expTISDev$RI, expTISDev$session), FUN = "mean")
expRImDev = aggregate(x=expRIDev$diffabs, by = list(expRIDev$id, expRIDev$serpos, expRIDev$RI, expRIDev$session), FUN = "mean")
expITImDev = cbind(expITImDevpre, expITImDevpost)
expITImDev = expITImDev[c(-(5:7))]
rm(expITImDevpre,expITImDevpost)
rm(expITIDevpre,expITIDevpost)
names(expSPmDev) = c("id", "serpos", "session", "Deviation") # SerialPosition = serpos
names(expRImDev) = c("id", "serpos", "TempIso", "session", "Deviation") # RetentionInt = TempIso
names(expRISmDev) = c("id", "serpos", "TempIsoS", "session", "Deviation")
names(expITImDev) = c("id", "iti", "session", "Deviationpre", "Deviationpost")
names(expTImDev) = c("id", "TempIso", "session", "Deviation")
names(expTISmDev) = c("id", "TempIso", "session", "Deviation")
uniqueTempIso <- unique(expTImDev$TempIso)
#   cut6 <- uniqueTempIso[seq(1,length(uniqueTempIso),length.out=7)]
#   h6 <- hist(expTImDev$TempIso, breaks=cut6, plot=F)
#   cut6[1] <- cut6[1] - 0.0001
#   expTImDev$TempIso <- as.numeric(cut(expTImDev$TempIso, breaks=(cut6)))
cut4 <- uniqueTempIso[seq(1,length(uniqueTempIso),length.out=5)]
h4 <- hist(expTISmDev$TempIso, breaks=cut4, plot=F)
cut4[1] <- cut4[1] - 0.0001
expTISmDev$TempIso <- as.numeric(cut(expTISmDev$TempIso, breaks=(cut4)))
#############################################################################################################################################
####################################################    data analysis - plots   #############################################################
#############################################################################################################################################
setwd("C:\\Daten\\R\\Bayes\\VisWM\\Colorwheel.TD.Sonja")
# Plotting distribution of responses around target colors by serial position
# RI = temporal isolation in every case, it's not Retention interval
x11(10,7)
breaks <- seq(-180, 180, by=10)
layout(matrix(1:6,2,3,byrow=T))
for (sp in 1:5) {
dd <- subset(expSP, serpos==sp)
hist(dd$diff, breaks=breaks, main=paste("Serial Position ", as.character(sp)), xlab="Deviation", ylim=c(1,1500))
}
# means and CI's plotting ##################################################################################################################
Ylim <- c(20,70)
# serial position ##########################################################################################################################
# Let's use the CI function to compute means and the 95%-CIs
Dev.CIs = summarySEwithin(expSPmDev, measurevar="Deviation", withinvars=c("serpos", "session"), idvar="id")
Dev.CIs$serpos = factor(Dev.CIs$serpos, labels = c("1", "2", "3", "4", "5")) # set serpos to factor
Dev.CIs$session = factor(Dev.CIs$session, labels = c("Silent","AS"))
ydegree <- expression("Recall Error (" ~degree~")")
x11()
layout(matrix(1:4,2,2, byrow=T))
library("Hmisc")
library("plotrix")
dd <- subset(Dev.CIs, session=="Silent")
errbar(1:5, y=dd$Deviation_norm, yplus=dd$Deviation_norm+dd$ci, yminus=dd$Deviation_norm - dd$ci, type="b", pch=21,
bg="black", errbar.col="black", xlim=c(1,5), ylim=Ylim, xlab="Serial Position", ylab=ydegree)
par(new=T)
dd <- subset(Dev.CIs, session=="AS")
errbar(1:5, y=dd$Deviation_norm, yplus=dd$Deviation_norm+dd$ci, yminus=dd$Deviation_norm - dd$ci, type="b", pch=22,
bg="white", errbar.col="black", xlim=c(1,5), ylim=Ylim, xlab="Serial Position", ylab=ydegree)
legend(5, 1, c("Silent", "AS"), pch=c(21,22), pt.bg=c("black", "white"), xjust=1, yjust=0)
title(maintext)
# temporal isolation overall #######################################################################################################################
# temp Iso short
# Let's use the CI function to compute means and the 95%-CIs
Dev.CIs = summarySEwithin(expTISmDev, measurevar="Deviation", withinvars=c("TempIso", "session"), idvar="id")
Dev.CIs$session = factor(Dev.CIs$session, labels = c("Silent","AS"))
factorlabels <- as.character(h4$mids)  #uses the mid points of the categories
Dev.CIs$TempIso = factor(Dev.CIs$TempIso, labels = factorlabels)
# Plotting the mean deviation
dd <- subset(Dev.CIs, session=="Silent")
x <- as.numeric(levels(dd$TempIso))
xlim <- c(min(x)-0.01, max(x)+0.01)
errbar(x, y=dd$Deviation_norm, yplus=dd$Deviation_norm+dd$ci, yminus=dd$Deviation_norm - dd$ci, type="b", pch=21,
bg="black", errbar.col="black", xlim=xlim, ylim=Ylim, xlab="Temporal Isolation", ylab=ydegree)
par(new=T)
dd <- subset(Dev.CIs, session=="AS")
errbar(x, y=dd$Deviation_norm, yplus=dd$Deviation_norm+dd$ci, yminus=dd$Deviation_norm - dd$ci, type="b", pch=22,
bg="white", errbar.col="black", xlim=xlim, ylim=Ylim, xlab="Temporal Isolation", ylab=ydegree)
axis.break(2,.22,style="slash")
legend(min(xlim), 0, c("Silent", "AS"), pch=c(21,22), pt.bg=c("black", "white"), yjust=0)
title(maintext)
axis.break(2,22,style="slash")
axis.break(2,18,style="slash")
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
source('C:/Daten/R/Bayes/VisWM/Colorwheel.TD.Sonja/NewPlots_KO.R', echo=TRUE)
graphics.off()
pp <- getwd()
püp
pp
dirname(pp)
pq <- paste(dirname(pp), "/new", sep="")
pq
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BF1.1.SetsizeAccuracy")
source(paste(dirname(getwd()), "/functions/plot.confint.R"))
source(paste(dirname(getwd()), "/functions/plot.confint.R", sep=""))
source('C:/Daten/R/Plots/Benchmarks.Pub/BF1.1.SetsizeAccuracy/BM1.1.SetsizeAccuracy.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BF1.1.SetsizeAccuracy/BM1.1.SetsizeAccuracy.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BF1.1.SetsizeAccuracy/BM1.1.SetsizeAccuracy.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BF1.1.SetsizeAccuracy/BM1.1.SetsizeAccuracy.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BF1.1.SetsizeAccuracy/BM1.1.SetsizeAccuracy.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM1.2.SetsizeRT/Donkin.Sternberg.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM1.2.SetsizeRT")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM1.2.SetsizeRT/Donkin.Sternberg.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM1.2.SetsizeRT/Donkin.Sternberg.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM1.3.NChunks")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM1.3.NChunks/Chen.Cowan.Nchunks.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM2.RetentionInterval/BM2.RetentionInterval.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM2.RetentionInterval")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM2.RetentionInterval/BM2.RetentionInterval.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM2.RetentionInterval/BM2.RetentionInterval.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM2.5.PresTime/BM2.5.Prestime.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM2.5.PresTime")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM2.5.PresTime/BM2.5.Prestime.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.1.SP.Accuracy/BM3.1.SP.Accuracy.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM3.1.SP.Accuracy")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.1.SP.Accuracy/BM3.1.SP.Accuracy.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.1.SP.Accuracy/BM3.1.SP.Accuracy.R', echo=TRUE)
########### Figure 7: Serial-Position Effects on Accuracy ##############
library("Hmisc")
source(paste(dirname(getwd()), "/functions/plot.confint.R", sep=""))
source(paste(dirname(getwd()), "/functions/Bakeman.R", sep=""))
colors <- c("black", "grey", "white", "grey80", "grey20", "black", "white")
## forward and backward serial recall (Madigan, 1971)
madigan <- read.table("Madigan.1971.txt", colClasses=c("character"), header=F)
M <- as.data.frame(matrix(0, dim(madigan)[1], 11))
for (line in 1:dim(madigan)[1]) {
M[line,1] <- as.numeric(substring(madigan[line,], 1,2))
for (col in 2:11) {
M[line,col] <- as.numeric(substring(madigan[line,], first=col+1, last=col+1))
}
}
names(M) <- c("id", "modality", "direction", "sp1", "sp2", "sp3", "sp4", "sp5", "sp6", "sp7", "sp8")
# 1 = audio, 2 = visual; 1 = forward, 2 = backward
accuracy <- t(apply(M[,4:11], MARGIN=1, FUN=function(x){as.numeric(as.numeric(x)==c(1:8))}))
Macc <- cbind(M[,1:3], accuracy)
names(Macc) <- c("id", "modality", "direction", "sp1", "sp2", "sp3", "sp4", "sp5", "sp6", "sp7", "sp8")
Magg <- aggregate(cbind(sp1,sp2,sp3,sp4,sp5,sp6,sp7,sp8) ~ id+modality+direction, data=Macc, FUN=mean)
names(Magg) <- c("id", "modality", "direction", "sp1", "sp2", "sp3", "sp4", "sp5", "sp6", "sp7", "sp8")
madigan <- read.table("Madigan.1971.txt", colClasses=c("character"), header=F)
M <- as.data.frame(matrix(0, dim(madigan)[1], 11))
for (line in 1:dim(madigan)[1]) {
M[line,1] <- as.numeric(substring(madigan[line,], 1,2))
for (col in 2:11) {
M[line,col] <- as.numeric(substring(madigan[line,], first=col+1, last=col+1))
}
}
M
View(madigan)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM3.2.SP.Modality")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.2.SP.Modality/BM3.2.SP.Modality.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.2.SP.Modality/BM3.2.SP.Modality.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.SP.Latency")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.SP.Latency/BP3.3.SP.Latency.Recall.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.SP.Latency/BP3.3.SP.Latency.Recall.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM5.1.MultipleMemSets/BM5.1.MultpleMemSets.CowanMorey2007.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM5.1.MultipleMemSets")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM5.1.MultipleMemSets/BM5.1.MultpleMemSets.CowanMorey2007.R', echo=TRUE)
