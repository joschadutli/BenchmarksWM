NewVector <- matrix(0, 1, 5, 8)
NewVector
NewVector <- matrix(0, 1, 5)
myMatrix > 4
myMatrix
myMatrix >= 4
NewVector <- matrix(0, 1, 5)
NewVector
myVector
myVector == 2
NewVector[myVector == 2] <- 1
NewVector
myVector[myVector == 2] <- 1
myVector
myVector == 2
myMatrix
myMatrix[myMatrix < 4] * 2
myMatrix2 <- myMatrix[myMatrix < 4] * 2
myMatrix2
myMatrix[myMatrix < 4] <- myMatrix[myMatrix < 4] * 2
myMatrix
myMatrix[myMatrix < 4]
myMatrix[myMatrix < 5]
myVectorH
myVectorT <- t(myVectorH)
myVectorT
t(myVectorT)
myMatrix
t(myMatrix)
myVector
t(myVector)
t(t(myVector))
myVector
myVectorH
myVector + myVectorH
myVector - myVectorH
myVector + myVector
myMatrix
Tworows
myMatrix + Tworows
myVector * myVectorH
myVector * c(1,2,3)
myVector / 0
log(-3)
Tworows
Tworows[1,3] <- NA
Tworows
Tworows + 3
sum(Tworows)
sum(Tworows, na.rm = TRUE)
Tworows
Tworows[is.na] <- 0
is.na(Tworows)
is.na(Tworows, na.rm=TRUE)
Tworows[is.na(Tworows)] <- 0
Tworows
Tworows[Tworows==0] <- NA
Tworows
myMatrix
myMatrix * 2
myVectorT
myVectorH
myVectorT %*% myVectorH
myVectorH %*% myVectorT
myVectorH
myVectorT
v <- myVectorH * myVectorT
v <- myVectorH * t(myVectorT)
v
sum(v)
d <- myVector/myVectorH
myVector/myVectorH
myVector
myVectorH
runif(100)<0.5
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
X <- matrix(randn(1:20, 4, 5))
X <- matrix(rnorm(1:20, 4, 5))
plot(1:4, X)
X
X <- matrix(rnorm(1:20, 0, 1), 4, 5)
X
plot(1:4, X)
plot(1:5, X)
matplot(1:4,X)
matplot(1:4,X, type="b")
matplot(1:5,X, type="b")
matplot(1:5,t(X), type="b")
X
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
exemplars <- list
exemplars <- list()
exemplars[[1]] <- "Modelling is great"
exemplars[[2]] <- 123
exemplars
exemplars[[2]] <- 123
exemplars[[3]] <- matrix(NA, 2, 3)
exemplars
runif(100)
runif(100)<0.5
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
print(t)
N <- 100
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
decayTimes
N <- 100
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 100
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 100
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 100
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
N <- 1000
decayTimes <- matrix(NA, 1, N)
for (repetition in 1:N) {
atoms <- matrix(1, 1, 100)
t <- 0
while (sum(atoms) > 0){
atoms[runif(100)<0.5] <- 0
t <- t + 1
}
decayTimes[1,repetition] <- t
}
print(mean(decayTimes))
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
actVals
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
actVals[randVals]
randVals
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
initAct
randVals
initAct + randVals
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
actVals
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.R', echo=TRUE)
propCorrect
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
DataMatrix
t(DataMatrix)
x11()
matplot(delay, t(DataMatrix), type="b",
xlim=c(0, max(delay+0.5)), ylim=c(0,1), xlab="Delay (s)", ylab="P(correct)")
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Teaching/Modelling/SimpleSTM.modified.R', echo=TRUE)
source('C:/Daten/R/Plots/BenchmarksWM.Data/BM2.RetentionInterval/BM2.RetentionInterval.R', echo=TRUE)
setwd("C:/Daten/R/Plots/BenchmarksWM.Data/BM2.RetentionInterval")
source('C:/Daten/R/Plots/BenchmarksWM.Data/BM2.RetentionInterval/BM2.RetentionInterval.R', echo=TRUE)
source('C:/Daten/R/Plots/BenchmarksWM.Data/BM2.RetentionInterval/BM2.RetentionInterval.R', echo=TRUE)
