### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
### Simulated Experiment (Elaborate Version)
nsubj <- 20
ntrials <- 100
noise <- 0.1
meanAbility <- rnorm(nsubj, 0, 1)   # ability is a normally distributed latent variable
effectA <- 0.1
effectB <- 0.15
# desired cell means on the probability scale
cellMeans <- c(0.5 - effectA/2 - effectB/2,
0.5 - effectA/2 + effectB/2,
0.5 + effectA/2 - effectB/2,
0.5 + effectA/2 + effectB/2)
cellMeans
g1 <- rnorm(5,0,1)
g2 <- rnorm(5,0,1)
t.test(g1,g2)
TT <- t.test(g1,g2)
summary(TT)
str(TT)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
x11()
plot(PC, DFR, type="p", xlim=c(0,01), ylim=c(0,1), xlab="PC(immediate)", ylab="PC(delayed)" )
require(graphics)
cars
Data <- as.data.frame(CL, PC, DFR)
Data <- data.frame(CL, PC, DFR)
View(Data)
x11()
plot(CL, PC, type="p", xlim=c(0.2,0.5), ylim=c(0,1), xlab="Cognitive Load", ylab="P(correct)" )
abline(coef(line(Data[,1:2])))
x11()
plot(CL, DFR, type="p", xlim=c(0.2,0.5), ylim=c(0,0.5), xlab="Cognitive Load", ylab="P(recall)" )
abline(coef(line(Data[,c(1,3)])))
x11()
plot(PC, DFR, type="p", xlim=c(0,01), ylim=c(0,1), xlab="PC(immediate)", ylab="PC(delayed)" )
abline(coef(line(Data[,c(2,3)])))
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
# Automatic update of R and its packages
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
source('C:/Daten/R/Toolbox/UpdateR.R', echo=TRUE)
source('C:/Daten/R/Plots/Refreshing/MetroRef/MetroRef1.R', echo=TRUE)
aggdat <- aggregate(reftime ~ condition+stimcat, data=data, FUN=mean)
aggdat
View(data)
rdata <- subset(data, reftime>0)  #data with actual responses (eliminate negatives)
aggdat <- aggregate(reftime ~ condition+stimcat, data=rdata, FUN=mean)
aggdat
aggdat.resp <- aggregate(response ~ condition+stimcat, data=data, FUN=mean)
aggdat.time <- aggregate(reftime ~ condition+stimcat, data=rdata, FUN=mean)
data$response <- data$reftime > 0 # whether a response was given at all in self-paced condition
aggdat.resp <- aggregate(response ~ condition+stimcat, data=data, FUN=mean)
aggdat.time <- aggregate(reftime ~ condition+stimcat, data=rdata, FUN=mean)
aggdata.resp
aggdat.resp
aggdat.time
source('C:/Daten/R/Plots/Refreshing/MetroRef/MetroRef1.R', echo=TRUE)
aggdat.resp
aggdat.time
spacebardata <- subset(data, condition==1)
x11()
hist(spacebardata$reftime)
metrodata <- subset(data, condition==2)
x11()
hist(metrodata$reftime)
source('C:/Daten/R/Bayes/Pairs.Binding/Pairs6_SamuelPawel.R', echo=TRUE)
correctdata
View(intrusiondata)
View(newdata)
View(olddata)
View(newdata)
correctdata$correct + intrusiondata$intrusion + olddata$old + newdata$new
RTdata
anovaRT
anovaCorrect
setwd("C:/Daten/R/Plots/Benchmarks")
for (id in 1:19) {
datafile <- paste(pwd, "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat[1])), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- cbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 14:18)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
for (id in 1:19) {
datafile <- paste(getwd, "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat[1])), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- cbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 14:18)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
datafile
datafile <- paste(as.character(getwd), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
a <- getwd()
a
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
datafile
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat[1])), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- cbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 14:18)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
dim(dat[1])
rep(id, dim(dat)[1])
dat <- cbind(rep(id, dim(dat)[1]), dat)
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- cbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 14:18)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 14:18)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
View(SATdat)
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
View(SATdat)
SATdat <- SATdat[,c(1:4, 15:19)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
View(SATdat)
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 15:19)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
SATdat <- SATdat[SATdat$flag==0,]  # eliminate not-to-be-used trials (according to Ilke Oeztekin)
SATdat$serpos[is.element(Satdat$cond, c(0,1))] <- 1
SATdat$serpos[is.element(Satdat$cond, c(2,3))] <- 2
SATdat$serpos[is.element(Satdat$cond, c(4,5))] <- 3
SATdat$serpos[is.element(Satdat$cond, c(6,7))] <- 4
SATdat$serpos[is.element(Satdat$cond, c(8,9))] <- 5
SATdat$serpos[is.element(Satdat$cond, c(10,11))] <- 6
SATdat$ptype[is.element(Satdat$cond, 1:11)] <- 1  # all positive probes
SATdat$ptype[is.element(Satdat$cond, c(12:14))] <- 3  # all lures from 1st category
SATdat$ptype[is.element(Satdat$cond, c(15:17))] <- 4  # all lures from 2nd category
SATdat$ptype[is.element(Satdat$cond, c(18:20))] <- 5  # recent negative lure from previous trial
SATdat$ptype[is.element(Satdat$cond, c(21:23))] <- 2  # new lure
SATdat$serpos[is.element(SATdat$cond, c(0,1))] <- 1
SATdat$serpos[is.element(SATdat$cond, c(2,3))] <- 2
SATdat$serpos[is.element(SATdat$cond, c(4,5))] <- 3
SATdat$serpos[is.element(SATdat$cond, c(6,7))] <- 4
SATdat$serpos[is.element(SATdat$cond, c(8,9))] <- 5
SATdat$serpos[is.element(SATdat$cond, c(10,11))] <- 6
SATdat$ptype[is.element(SATdat$cond, 1:11)] <- 1  # all positive probes
SATdat$ptype[is.element(SATdat$cond, c(12:14))] <- 3  # all lures from 1st category
SATdat$ptype[is.element(SATdat$cond, c(15:17))] <- 4  # all lures from 2nd category
SATdat$ptype[is.element(SATdat$cond, c(18:20))] <- 5  # recent negative lure from previous trial
SATdat$ptype[is.element(SATdat$cond, c(21:23))] <- 2  # new lure
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 15:19)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
SATdat <- SATdat[SATdat$flag==0 & SATdat$rt < 600,]  # eliminate not-to-be-used trials (according to Ilke Oeztekin)
SATdat$serpos[is.element(SATdat$cond, c(0,1))] <- 1
SATdat$serpos[is.element(SATdat$cond, c(2,3))] <- 2
SATdat$serpos[is.element(SATdat$cond, c(4,5))] <- 3
SATdat$serpos[is.element(SATdat$cond, c(6,7))] <- 4
SATdat$serpos[is.element(SATdat$cond, c(8,9))] <- 5
SATdat$serpos[is.element(SATdat$cond, c(10,11))] <- 6
SATdat$ptype[is.element(SATdat$cond, 1:11)] <- 1  # all positive probes
SATdat$ptype[is.element(SATdat$cond, c(12:14))] <- 3  # all lures from 1st category
SATdat$ptype[is.element(SATdat$cond, c(15:17))] <- 4  # all lures from 2nd category
SATdat$ptype[is.element(SATdat$cond, c(18:20))] <- 5  # recent negative lure from previous trial
SATdat$ptype[is.element(SATdat$cond, c(21:23))] <- 2  # new lure
SATpos <- subset(SATdat, ptype==1)
SATwide <- aggregate(corr ~ id+serpos, data=SATpos, FUN=mean) %>% spread( serpos, corr)
SATagg <- Confint(Bakeman(SATwide[,2:7]))
SATwideT <- aggregate(lagrt ~ id+serpos, data=SATpos, FUN=mean) %>% spread( serpos, lagrt)
library(tidyr)
library(plyr)
library(dplyr)
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 15:19)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
SATdat <- SATdat[SATdat$flag==0 & SATdat$rt < 600,]  # eliminate not-to-be-used trials (according to Ilke Oeztekin)
SATdat$serpos[is.element(SATdat$cond, c(0,1))] <- 1
SATdat$serpos[is.element(SATdat$cond, c(2,3))] <- 2
SATdat$serpos[is.element(SATdat$cond, c(4,5))] <- 3
SATdat$serpos[is.element(SATdat$cond, c(6,7))] <- 4
SATdat$serpos[is.element(SATdat$cond, c(8,9))] <- 5
SATdat$serpos[is.element(SATdat$cond, c(10,11))] <- 6
SATdat$ptype[is.element(SATdat$cond, 1:11)] <- 1  # all positive probes
SATdat$ptype[is.element(SATdat$cond, c(12:14))] <- 3  # all lures from 1st category
SATdat$ptype[is.element(SATdat$cond, c(15:17))] <- 4  # all lures from 2nd category
SATdat$ptype[is.element(SATdat$cond, c(18:20))] <- 5  # recent negative lure from previous trial
SATdat$ptype[is.element(SATdat$cond, c(21:23))] <- 2  # new lure
SATpos <- subset(SATdat, ptype==1)
SATwide <- aggregate(corr ~ id+serpos, data=SATpos, FUN=mean) %>% spread( serpos, corr)
SATagg <- Confint(Bakeman(SATwide[,2:7]))
SATwideT <- aggregate(lagrt ~ id+serpos, data=SATpos, FUN=mean) %>% spread( serpos, lagrt)
#Bakeman & McArthur correction (for wide data)
Bakeman <- function (data) {
mean = rowMeans(data)
corrdata = data - mean + mean(mean)
}
# Bakeman & McArthur correction (for long data): id = column with subject id, dv = column with dependent variable
BakemanL <- function (data, id=1, dv=2) {
idvar <- data[,id]
subjMeans <- aggregate(x=data[,dv], by=list(data[,id]), FUN=mean)
ids <- unique(idvar)
corrdata <- data
for (ii in 1:length(ids)) {
corrdata[data[,id]==ids[ii],dv] <- corrdata[data[,id]==ids[ii],dv] - subjMeans[ii,2] + mean(subjMeans[,2])
}
return(corrdata)
}
#Compute Means and Confidence Intervals (from wide data)
Confint <- function(data) {
means <- colMeans(data)
ci <- 1.96*apply(data, MARGIN=2, sd)/sqrt(dim(data)[1])
upperci <- means+ci
lowerci <- means-ci
return(rbind(means, upperci, lowerci))
}
SATpos <- subset(SATdat, ptype==1)
SATwide <- aggregate(corr ~ id+serpos, data=SATpos, FUN=mean) %>% spread( serpos, corr)
SATagg <- Confint(Bakeman(SATwide[,2:7]))
SATwideT <- aggregate(lagrt ~ id+serpos, data=SATpos, FUN=mean) %>% spread( serpos, lagrt)
View(SATwide)
View(SATagg)
View(SATwideT)
SATtime <- colMeans(SATwideT[,2:7])
unique(SATdat$lag)
library(tidyr)
library(plyr)
library(dplyr)
bgk <- c("black", "grey20", "grey40", "grey60", "grey80", "white")
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 15:19)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
SATdat <- SATdat[SATdat$flag==0 & SATdat$rt < 600,]  # eliminate not-to-be-used trials (according to Ilke Oeztekin)
SATdat$serpos[is.element(SATdat$cond, c(0,1))] <- 1
SATdat$serpos[is.element(SATdat$cond, c(2,3))] <- 2
SATdat$serpos[is.element(SATdat$cond, c(4,5))] <- 3
SATdat$serpos[is.element(SATdat$cond, c(6,7))] <- 4
SATdat$serpos[is.element(SATdat$cond, c(8,9))] <- 5
SATdat$serpos[is.element(SATdat$cond, c(10,11))] <- 6
SATdat$ptype[is.element(SATdat$cond, 1:11)] <- 1  # all positive probes
SATdat$ptype[is.element(SATdat$cond, c(12:14))] <- 3  # all lures from 1st category
SATdat$ptype[is.element(SATdat$cond, c(15:17))] <- 4  # all lures from 2nd category
SATdat$ptype[is.element(SATdat$cond, c(18:20))] <- 5  # recent negative lure from previous trial
SATdat$ptype[is.element(SATdat$cond, c(21:23))] <- 2  # new lure
SATpos <- subset(SATdat, ptype==1)
plot(0,0, xlim=c(0, 5),ylim=c(0.5,1), type="n", las=1,
xlab="Lag + RT", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lat, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=20+sp, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,5), ylim=c(0.5,1), xlab="", ylab="")
}
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=20+sp, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,5), ylim=c(0.5,1), xlab="", ylab="")
}
library(tidyr)
library(plyr)
library(dplyr)
library("Hmisc")
bgk <- c("black", "grey20", "grey40", "grey60", "grey80", "white")
for (id in 1:19) {
datafile <- paste(getwd(), "/Oeztekin.McElree.2010/S", as.character(id), ".dat", sep="")
dat <- read.table(datafile, header=F)
dat <- cbind(rep(id, dim(dat)[1]), dat)
if (id == 1) SATdat <- dat
if (id > 1) SATdat <- rbind(SATdat, dat)
}
SATdat <- SATdat[,c(1:4, 15:19)]
names(SATdat) <- c("id", "trial", "cond", "lag", "flag", "lagrt", "rt", "corr", "confidence")
SATdat <- SATdat[SATdat$flag==0 & SATdat$rt < 600,]  # eliminate not-to-be-used trials (according to Ilke Oeztekin)
SATdat$serpos[is.element(SATdat$cond, c(0,1))] <- 1
SATdat$serpos[is.element(SATdat$cond, c(2,3))] <- 2
SATdat$serpos[is.element(SATdat$cond, c(4,5))] <- 3
SATdat$serpos[is.element(SATdat$cond, c(6,7))] <- 4
SATdat$serpos[is.element(SATdat$cond, c(8,9))] <- 5
SATdat$serpos[is.element(SATdat$cond, c(10,11))] <- 6
SATdat$ptype[is.element(SATdat$cond, 1:11)] <- 1  # all positive probes
SATdat$ptype[is.element(SATdat$cond, c(12:14))] <- 3  # all lures from 1st category
SATdat$ptype[is.element(SATdat$cond, c(15:17))] <- 4  # all lures from 2nd category
SATdat$ptype[is.element(SATdat$cond, c(18:20))] <- 5  # recent negative lure from previous trial
SATdat$ptype[is.element(SATdat$cond, c(21:23))] <- 2  # new lure
SATpos <- subset(SATdat, ptype==1)
plot(0,0, xlim=c(0, 5),ylim=c(0.5,1), type="n", las=1,
xlab="Lag + RT", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=20+sp, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,5), ylim=c(0.5,1), xlab="", ylab="")
}
plot(0,0, xlim=c(0, 5),ylim=c(0.5,1), type="n", las=1,
xlab="Lag + RT", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=21, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,5), ylim=c(0.5,1), xlab="", ylab="")
}
warnings()
satagg
time
plot(0,0, xlim=c(0, 5),ylim=c(0.5,1), type="n", las=1,
xlab="Lag + RT", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])/1000
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=21, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,5), ylim=c(0.5,1), xlab="", ylab="")
}
x11(8,6)
maxx <- 3.5
plot(0,0, xlim=c(0, maxx),ylim=c(0.45,1), type="n", las=1,
xlab="Lag + RT", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])/1000
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=21, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,maxx), ylim=c(0.45,1), xlab="", ylab="")
}
legend(maxx,0.5,c("SP=1", "SP=2", "SP=3", "SP=4", "SP=5", "SP=6"), pch=21, pt.bg = bgk)
legend(maxx,0.5,c("SP=1", "SP=2", "SP=3", "SP=4", "SP=5", "SP=6"), pch=21, pt.bg = bgk, xjust=0, yjust=1)
legend(maxx,0.5,c("SP=1", "SP=2", "SP=3", "SP=4", "SP=5", "SP=6"), pch=21, pt.bg = bgk, xjust=1, yjust=0)
x11(8,6)
maxx <- 3.5
miny <- 0.4
plot(0,0, xlim=c(0, maxx),ylim=c(miny,1), type="n", las=1,
xlab="Lag + RT", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])/1000
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=21, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,maxx), ylim=c(miny,1), xlab="", ylab="")
}
legend(maxx,miny,c("SP=1", "SP=2", "SP=3", "SP=4", "SP=5", "SP=6"), pch=21, pt.bg = bgk, xjust=1, yjust=0)
x11(8,6)
maxx <- 3.5
miny <- 0.4
plot(0,0, xlim=c(0, maxx),ylim=c(miny,1), type="n", las=1,
xlab="Lag + RT (s)", ylab="Proportion Correct",cex.lab=1,xaxt="n",yaxt="n", cex.axis=1)
for (sp in 1:6) {
sat <- subset(SATpos, serpos==sp)
satwide <- aggregate(corr ~ id+lag, data=sat, FUN=mean) %>% spread( lag, corr)
satagg <- Confint(Bakeman(satwide[,2:8]))
timewide <- aggregate(lagrt ~ id+lag, data=sat, FUN=mean) %>% spread(lag, lagrt)
time <- colMeans(timewide[,2:8])/1000
par(new=T)
errbar(time, y=satagg[1,], yplus=satagg[2,], yminus=satagg[3,], type="b", pch=21, lty=1,
bg=bgk[sp], errbar.col="black", xlim=c(0,maxx), ylim=c(miny,1), xlab="", ylab="")
}
legend(maxx,miny,c("SP=1", "SP=2", "SP=3", "SP=4", "SP=5", "SP=6"), pch=21, pt.bg = bgk, xjust=1, yjust=0)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.2.SAT.LastItem/Oeztekin.McElree.SAT.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.2.SAT.LastItem/Oeztekin.McElree.SAT.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.2.SAT.LastItem")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.2.SAT.LastItem/Oeztekin.McElree.SAT.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.2.SAT.LastItem")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.3.2.SAT.LastItem/Oeztekin.McElree.SAT.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.5.1.FirstRecallProb/GrenfellEssamWardFirstRecallProb.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM3.5.1.FirstRecallProb")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM3.5.1.FirstRecallProb/GrenfellEssamWardFirstRecallProb.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM4.1.1.LocalityConstraint")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM4.1.1.LocalityConstraint/LocalityConstraint.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM4.1.1.LocalityConstraint/LocalityConstraint.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM4.5.ErrorDistributionDE")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM4.5.ErrorDistributionDE/ErrorDistributionDelayedEstimation.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM4.5.ErrorDistributionDE/ErrorDistributionDelayedEstimation.R', echo=TRUE)
x11(10,8)
layout(matrix(1:2,1,2))
errbar(1:5, y=tgrad0[1,], yplus=tgrad0[2,], yminus=tgrad0[3,], xlab="Transposition Distance", ylab="P(Response)/P(Opportunity)",
xlim=c(0.5,5.5), ylim=c(0,0.25), pch=21, bg="black", type="b", cex=1.3)
par(new=T)
errbar(1:5, y=tgrad1[1,], yplus=tgrad1[2,], yminus=tgrad1[3,], xlab="Transposition Distance", ylab="P(Response)/P(Opportunity)",
xlim=c(0.5,5.5), ylim=c(0,0.25), pch=22, bg="white", type="b", cex=1.3)
legend(5,0.25,c("No interference","Interference"),lty=ltyk,pch=20+c(1:2),pt.bg=c("black", "white"),pt.cex=1.3, xjust=1)
errbar(bincenters, y=Dens[1,], yplus=Dens[2,], yminus=Dens[3,],
xlab="Euclidean Distance", ylab="P(Selection|Error)",
xlim=c(0.5,max(histbounds)+0.5), ylim=c(0,0.3), add=F, type="b", cex=1.3)
xcoord <- cbind(histbounds,histbounds)
ycoord <- cbind(rep(0,nBins+1), rep(0.05,nBins+1))
for (lin in 1:dim(xcoord)[1]) lines(x=xcoord[lin,], y=ycoord[lin,], col="red")
x11(10,8)
layout(matrix(1:2,1,2))
errbar(1:5, y=tgrad0[1,], yplus=tgrad0[2,], yminus=tgrad0[3,], xlab="Transposition Distance", ylab="P(Response)/P(Opportunity)",
xlim=c(0.5,5.5), ylim=c(0,0.25), pch=21, bg="black", type="b", cex=1.3)
par(new=T)
errbar(1:5, y=tgrad1[1,], yplus=tgrad1[2,], yminus=tgrad1[3,], xlab="Transposition Distance", ylab="P(Response)/P(Opportunity)",
xlim=c(0.5,5.5), ylim=c(0,0.25), pch=22, bg="white", type="b", cex=1.3)
legend(5,0.25,c("No interference","Interference"),lty=1,pch=20+c(1:2),pt.bg=c("black", "white"),pt.cex=1.3, xjust=1)
errbar(bincenters, y=Dens[1,], yplus=Dens[2,], yminus=Dens[3,],
xlab="Euclidean Distance", ylab="P(Selection|Error)",
xlim=c(0.5,max(histbounds)+0.5), ylim=c(0,0.3), add=F, type="b", cex=1.3)
xcoord <- cbind(histbounds,histbounds)
ycoord <- cbind(rep(0,nBins+1), rep(0.05,nBins+1))
for (lin in 1:dim(xcoord)[1]) lines(x=xcoord[lin,], y=ycoord[lin,], col="red")
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM5.2.MultipleTasks")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM5.2.MultipleTasks/MultipleTaskEffects.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM5.2.4.CogLoad")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM5.2.4.CogLoad/CognitiveLoadEffect.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM5.2.4.CogLoad/CognitiveLoadEffect.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM6.IrrelevantSound")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM6.IrrelevantSound/IrrelevantSoundEffect.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM8.1.PhonSimEffect")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM8.1.PhonSimEffect/PhonSimEffect.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM8.2.ItemProbeSim/ItemProbeSimChangeDetection.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM8.2.ItemProbeSim")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM8.2.ItemProbeSim/ItemProbeSimChangeDetection.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM9.2.Grouping")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM9.2.Grouping/Grouping.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM10.1.RetroCue/RetroCueChangeDetection.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM10.1.RetroCue")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM10.1.RetroCue/RetroCueChangeDetection.R', echo=TRUE)
source('C:/Daten/R/Plots/Benchmarks.Pub/BM11.1.Chunking/Chunking.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM11.1.Chunking")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM11.1.Chunking/Chunking.R', echo=TRUE)
setwd("C:/Daten/R/Plots/Benchmarks.Pub/BM11.5.HebbEffect")
source('C:/Daten/R/Plots/Benchmarks.Pub/BM11.5.HebbEffect/PageHebbEffect.R', echo=TRUE)
