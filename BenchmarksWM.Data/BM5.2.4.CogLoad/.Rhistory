CStroopNeutral <- ColorStroop[,c("subject", "ptimeNeutral", "spanNeutral")]
CStroopNeutral <- "ColorStroopNeutral"
CStroopColor <- ColorStroop[,c("subject", "ptimeColor", "spanColor")]
CStroopColor <- "ColorStroopColor"
ColorStroop <- rbind(CStroopNeutral, CStroopColor)
names(ColorStroop) <- c("subject", "ptime", "span")
ColorStroop$totaltime <- 8500
ColorStroop$CL <- ColorStroop$totaltime/ColorStroop$ptime  # cognitive load = total time / processing time
ColorStroop <- rbind(CStroopNeutral, CStroopColor)
head(ColorStroop)
head(CStroopNeutral)
ColorStroop <- read_excel("Barrouillet.2011.xlsx",sheet="Inhibition",range="B13:F33")
names(ColorStroop) <- c("subject", "ptimeNeutral", "ptimeColor", "spanNeutral", "spanColor")
ColorStroop <- read_excel("Barrouillet.2011.xlsx",sheet="Inhibition",range="B13:F33")
names(ColorStroop) <- c("subject", "ptimeNeutral", "ptimeColor", "spanNeutral", "spanColor")
CStroopNeutral <- ColorStroop[,c("subject", "ptimeNeutral", "spanNeutral")]
CStroopNeutral$task <- "ColorStroopNeutral"
CStroopColor <- ColorStroop[,c("subject", "ptimeColor", "spanColor")]
CStroopColor$task <- "ColorStroopColor"
ColorStroop <- rbind(CStroopNeutral, CStroopColor)
names(ColorStroop) <- c("subject", "ptime", "span")
ColorStroop$totaltime <- 8500
ColorStroop$CL <- ColorStroop$totaltime/ColorStroop$ptime  # cognitive load = total time / processing time
head(CStroopNeutral)
ColorStroop <- as.data.frame(read_excel("Barrouillet.2011.xlsx",sheet="Inhibition",range="B13:F33"))
names(ColorStroop) <- c("subject", "ptimeNeutral", "ptimeColor", "spanNeutral", "spanColor")
CStroopNeutral <- ColorStroop[,c("subject", "ptimeNeutral", "spanNeutral")]
CStroopNeutral$task <- "ColorStroopNeutral"
CStroopColor <- ColorStroop[,c("subject", "ptimeColor", "spanColor")]
CStroopColor$task <- "ColorStroopColor"
ColorStroop <- rbind(CStroopNeutral, CStroopColor)
head(CStroopNeutral)
ColorStroop <- as.data.frame(read_excel("Barrouillet.2011.xlsx",sheet="Inhibition",range="B13:F33"))
names(ColorStroop) <- c("subject", "ptimeNeutral", "ptimeColor", "spanNeutral", "spanColor")
CStroopNeutral <- ColorStroop[,c("subject", "ptimeNeutral", "spanNeutral")]
names(CStroopNeutral) <- c("subject", "ptime", "span")
CStroopNeutral$task <- "ColorStroopNeutral"
CStroopColor <- ColorStroop[,c("subject", "ptimeColor", "spanColor")]
names(CStroopColor) <- c("subject", "ptime", "span")
CStroopColor$task <- "ColorStroopColor"
ColorStroop <- rbind(CStroopNeutral, CStroopColor)
ColorStroop$totaltime <- 8500
ColorStroop$CL <- ColorStroop$totaltime/ColorStroop$ptime  # cognitive load = total time / processing time
RunningCount <- read_excel("Barrouillet.2011.xlsx",sheet="Updating",range="B14:F33")
names(RunningCount) <- c("subject", "ptimeUpdate", "ptimeSimple", "spanUpdate", "spanSimple")
RCountSimple <- RunningCount[, c("subject", "ptimeSimple", "spanSimple")]
names(RCountSimple) <- c("subject", "ptime", "span")
RCountSimple$task <- "Simple Storage"
RCountUpdate <- RunningCount[, c("subject", "ptimeUpdate", "spanUpdate")]
names(RCountUpdate) <- c("subject", "ptime", "span")
RCountUpdate$task <- "Running Count"
RunningCount <- rbind(RCountSimple, RCountUpdate)
RunningCount$totaltime <- 14000
RunningCount$CL <- RunningCount$totaltime/RunningCount$ptime  # cognitive load = total time / processing time
Nback <- read_excel("Barrouillet.2011.xlsx",sheet="Updating",range="J14:N38")
names(NumberStroop) <- c("subject", "ptime2back", "ptime0back", "span2back", "span0back")
NB0 <- Nback[, c("subject", "ptime0back", "span0back")]
names(NB0) <- c("subject", "ptime", "span")
NB0$task <- "0-back"
NB2 <- Nback[, c("subject", "ptime2back", "span2back")]
names(NB2) <- c("subject", "ptime", "span")
NB2$task <- "2-back"
Nback <- rbind(NB0, NB2)
Nback$totaltime <- 12500
Nback$CL <- Nback$totaltime/Nback$ptime  # cognitive load = total time / processing time
Nback <- read_excel("Barrouillet.2011.xlsx",sheet="Updating",range="J14:N38")
names(Nback) <- c("subject", "ptime2back", "ptime0back", "span2back", "span0back")
NB0 <- Nback[, c("subject", "ptime0back", "span0back")]
names(NB0) <- c("subject", "ptime", "span")
NB0$task <- "0-back"
NB2 <- Nback[, c("subject", "ptime2back", "span2back")]
names(NB2) <- c("subject", "ptime", "span")
NB2$task <- "2-back"
Nback <- rbind(NB0, NB2)
Nback$totaltime <- 12500
Nback$CL <- Nback$totaltime/Nback$ptime  # cognitive load = total time / processing time
Data <- rbind(Parity, Size, ColorStroop, NumberStroop, RunningCount, Nback)
NumberStroop <- as.data.frame(read_excel("Barrouillet.2011.xlsx",sheet="Inhibition",range="B13:F33"))
names(NumberStroop) <- c("subject", "ptimeNeutral", "ptimeNumber", "spanNeutral", "spanNumber")
NStroopNeutral <- NumberStroop[,c("subject", "ptimeNeutral", "spanNeutral")]
names(NStroopNeutral) <- c("subject", "ptime", "span")
NStroopNeutral$task <- "NumberStroopNeutral"
NStroopNumber <- NumberStroop[,c("subject", "ptimeNumber", "spanNumber")]
names(NStroopNumber) <- c("subject", "ptime", "span")
NStroopNumber$task <- "NumberStroopNumber"
NumberStroop <- rbind(NStroopNeutral, NStroopNumber)
NumberStroop$totaltime <- 8500
NumberStroop$CL <- NumberStroop$totaltime/NumberStroop$ptime  # cognitive load = total time / processing time
Data <- rbind(Parity, Size, ColorStroop, NumberStroop, RunningCount, Nback)
View(ColorStroop)
View(CStroopColor)
View(Parity)
source('C:/Daten/R/Projects/BenchmarksWM.Data/BM5.2.4.CogLoad/Barouillet2011.R', echo=TRUE)
source('C:/Daten/R/Projects/BenchmarksWM.Data/BM5.2.4.CogLoad/Barouillet2011.R', echo=TRUE)
View(Data)
source('C:/Daten/R/Projects/BenchmarksWM.Data/BM5.2.4.CogLoad/Barouillet2011.R', echo=TRUE)
View(Data)
library(readxl)
# Set the paths ---------------------------------------------------------------------------------------------
# to automatically get the path of the current folder use rstudioapi
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
myDir <- dirname(current_path)
setwd(myDir)
source(paste(dirname(getwd()), "/functions/lineplot.ci4.R", sep=""))
Data$constant <- 1
x11()
lineplot.ci4(Data, dv=c("CL", "span"), iv="constant", param=2, xlim=c(0,1), ylim=c(0,7),
xlab="Cognitive Load", ylab="Span")
View(Data)
debugSource('C:/Daten/R/Projects/BenchmarksWM.Data/Functions/lineplot.ci4.R')
lineplot.ci4(Data, dv=c("CL", "span"), iv="constant", param=2, xlim=c(0,1), ylim=c(0,7),
xlab="Cognitive Load", ylab="Span")
pt=15:25
col=rep("black", 11)
ptcol=rep("white",11)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(subdat$CL, subdat$span, xlim=xlim, ylim=ylim, type="b", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles("CL", "span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[j])
par(new=T)
}
T
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$C), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles("CL", "span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[j])
par(new=T)
}
str(Data)
str(subdat)
plot(mean(subdat$C), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles("CL", "span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[j])
par(new=T)
}
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles("CL", "span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
par(new=T)
}
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="CL", y="span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
par(new=T)
}
errorCircles(dv[x], dv[3-x], data=dd, group=iv[3-param], paired = F, labels = "",
main = main, xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[j], ...)
errorCircles(x="CL", y="span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
subdat
Data <- as.data.frame(rbind(Parity, Size, ColorStroop, NumberStroop, RunningCount, Nback))
Data$constant <- 1
pt=15:25
col=rep("black", 11)
ptcol=rep("white",11)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="CL", y="span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
par(new=T)
}
subdat
Data <- as.data.frame(rbind(Parity, Size, ColorStroop, NumberStroop, RunningCount, Nback))
pt=15:25
col=rep("black", 11)
ptcol=rep("white",11)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="CL", y="span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
par(new=T)
}
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="ptime", y="span", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
par(new=T)
}
x11()
for (T in 1:length(Tasks)) {
subdat <- subset(Data, task==Tasks[T])
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="CL", y="ptime", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
par(new=T)
}
mean(subdat$CL)
mean(subdat$span)
errorCircles(x="CL", y="ptime", data=subdat, labels = "",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
subdat
errorCircles(x="CL", y="span", data=Data, labels = "", group="task",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
str(Data)
errorCircles(x="CL", y="span", data=Data, labels = "", group="task",
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt[T])
errorCircles(x="CL", y="span", data=Data)
errorCircles(x="CL", y="span", data=Data[, c("CL", "span")])
errorCircles(1:25,1:25,data=bfi,group="gender",paired=TRUE,ylab="female scores",
xlab="male scores",main="BFI scores by gender")
bfi
errorCircles("EA1","TA1",data=affect.stats,labels=films,pch=16,cex=2,colors=colors,add=TRUE)
errorCircles("SATV","SATQ",sat.act,group="education")
sat.act
str(sat.act)
head(sat.act)
is.numeric(Data$CL)
is.numeric(Data$span)
errorCircles("CL","span", Data)
head(Data)
dim(Dat)
dim(Data)
sat1 <- sat.act[1:262,]
sat1$SATV <- Data$CL
errorCircles("SATV","SATQ",sat.act1,group="education")
sat1 <- sat.act[1:262,]
sat1$SATV <- Data$CL
errorCircles("SATV","SATQ",sat1,group="education")
sat1 <- sat.act[1:262,]
sat1$SATV <- Data$CL
sat1$SATQ <- Data$span
errorCircles("SATV","SATQ",sat1,group="education")
sat1 <- sat.act[1:262,]
sat1$SATV <- Data$CL
sat1$SATQ <- Data$span
errorCircles("SATV","SATQ",sat1)
errorCircles("SATV","SATQ",sat1,group="education")
errorCircles("SATV","SATQ",sat1,group=NULL)
errorCircles("SATV","SATQ",sat1,group=education)
errorCircles("SATV","SATQ",sat1,group="education")
sat1$education <- as.factor(sat1$education)
errorCircles("SATV","SATQ",sat1,group="education")
sat1 <- sat.act[1:262,]
sat1$SATV <- Data$CL
sat1$SATQ <- Data$span
sat1$education <- as.factor(sat1$education)
sat1$education <- Data$task
errorCircles("SATV","SATQ",sat1,group="education")
sat1 <- sat.act[1:262,]
sat1$SATV <- Data$CL
sat1$SATQ <- Data$span
sat1$education <- as.factor(sat1$education)
sat1$education <- as.factor(Data$task)
errorCircles("SATV","SATQ",sat1,group="education")
Data <- as.data.frame(rbind(Parity, Size, ColorStroop, NumberStroop, RunningCount, Nback))
Data$task <- as.factor(Data$task)
pt=15:25
col=rep("black", 11)
ptcol=rep("white",11)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="CL", y="span", data=Data, group=task, add=T)
Data$task <- as.factor(Data$task)
plot(mean(subdat$CL), mean(subdat$span), xlim=xlim, ylim=ylim, type="p", pch=pt[T], col=col[T], bg=ptcol[T])
errorCircles(x="CL", y="span", data=Data, group="task", add=T)
CL <- aggregate(CL ~ task, data=Data, FUN=mean)
Span <- aggregate(Span ~ task, data=Data, FUN=mean)
Span <- aggregate(span ~ task, data=Data, FUN=mean)
x11()
plot(CL, Span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol)
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, add=T,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt)
x11()
plot(CL, Span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol)
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim,
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt)
x11()
plot(CL, Span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
plot(CL, Span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
x11()
plot(CL, Span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
CL
x11()
plot(CL$CL, Span$Span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
View(Data)
unique(Data$task)
table(Data$CL, Data$task)
CL$CL
Span$Span
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
Span$span
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
pt=rep(15:25, 2)
col=rep("black", 14)
ptcol=rep("white",14)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
CL <- aggregate(CL ~ task, data=Data, FUN=mean)
Span <- aggregate(span ~ task, data=Data, FUN=mean)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
Span
CL
source('C:/Daten/R/Projects/BenchmarksWM.Data/BM5.2.4.CogLoad/Barouillet2011.R', echo=TRUE)
Span
unique(Span$span)
source('C:/Daten/R/Projects/BenchmarksWM.Data/BM5.2.4.CogLoad/Barouillet2011.R', echo=TRUE)
CL
ColorStroopColor$CL
CStroopColor$CL
View(Data)
CStroopNeutral
ColorStroop <- as.data.frame(read_excel("Barrouillet.2011.xlsx",sheet="Inhibition",range="B13:F33"))
names(ColorStroop) <- c("subject", "ptimeNeutral", "ptimeColor", "spanNeutral", "spanColor")
ColorStroop
View(Data)
pt=c(21,21,21,22,22,22,23,23,23,23,24,24,24,24)
col=rep("black", 14)
ptcol=rep("white", 14)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
CL <- aggregate(CL ~ task, data=Data, FUN=mean)
Span <- aggregate(span ~ task, data=Data, FUN=mean)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
pt=c(21,21,21,22,22,22,23,23,23,23,24,24,24,24)
col=rep("black", 14)
ptcol=rep("gray30", 14)
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,7)
CL <- aggregate(CL ~ task, data=Data, FUN=mean)
Span <- aggregate(span ~ task, data=Data, FUN=mean)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
ylim <- c(0,9)
CL <- aggregate(CL ~ task, data=Data, FUN=mean)
Span <- aggregate(span ~ task, data=Data, FUN=mean)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
CL
Span
pt=c(24, 24, 23, 23, 23, 23, 21, 21, 21, 24, 24, 22, 22) # markers corresponding to Barrouillet et al (2011)
col=rep("black", 14)
ptcol=c("red", "red", "blue", "blue", "blue", "blue", "black", "black", "black", "red", "red", "green", "green")
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,9)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
legend(0,0,c("Updating", "Inhibition", "Response Selection", "Retrieval",
pch=c(21:24), pt.bg=c("black", "green", "blue", "red")))
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
legend(0,1.5,c("Updating", "Inhibition", "Response Selection", "Retrieval",
pch=c(21:24), pt.bg=c("black", "green", "blue", "red")))
legend(1,7,c("Updating", "Inhibition", "Response Selection", "Retrieval",
pch=c(21:24), pt.bg=c("black", "green", "blue", "red")))
legend(1,9,c("Updating", "Inhibition", "Response Selection", "Retrieval",
pch=c(21:24), pt.bg=c("black", "green", "blue", "red")), yjust=1, xjust=0)
legend(1,9,c("Updating", "Inhibition", "Response Selection", "Retrieval",
pch=c(21:24), pt.bg=c("black", "green", "blue", "red")), yjust=0, xjust=1)
legend(1,9,c("Updating", "Inhibition", "Response Selection", "Retrieval",
pch=c(21:24), pt.bg=c("black", "green", "blue", "red")), yjust=1, xjust=1)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
legend(1,9,c("Updating", "Inhibition", "Response Selection", "Retrieval"),
pch=c(21:24), pt.bg=c("black", "green", "blue", "red"), yjust=1, xjust=1)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
legend(1,9,c("Updating", "Inhibition", "Response Selection", "Retrieval"),
pch=c(24,23,22,21), pt.bg=c("red", "blue", "green", "black"), yjust=1, xjust=1)
pt=c(24, 24, 23, 23, 23, 23, 21, 21, 21, 24, 24, 22, 22, 22) # markers corresponding to Barrouillet et al (2011)
col=rep("black", 14)
ptcol=c("red", "red", "blue", "blue", "blue", "blue", "black", "black", "black", "red", "red", "green", "green", "green")
Tasks <- unique(Data$task)
xlim <- c(0,1)
ylim <- c(0,9)
x11()
plot(CL$CL, Span$span, xlim=xlim, ylim=ylim, type="p", pch=pt, col=col, bg=ptcol,
xlab="CL", ylab="Span")
errorCircles(x="CL", y="span", data=Data, group="task", add=T,
xlim = xlim, ylim = ylim, labels="",
arrow.len = 0.05, alpha = 0.05, sd = FALSE, bars = TRUE, circles = F,
pch=pt, xlab="", ylab="")
abline(a=8.13, b=-8.33)
legend(1,9,c("Updating", "Inhibition", "Response Selection", "Retrieval"),
pch=c(24,23,22,21), pt.bg=c("red", "blue", "green", "black"), yjust=1, xjust=1)
CL
source('C:/Daten/R/Projects/BenchmarksWM.Data/BM5.2.4.CogLoad/Barouillet2011.R', echo=TRUE)
