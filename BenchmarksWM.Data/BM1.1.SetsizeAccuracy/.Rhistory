rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
print(Quality)
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
print(Quality)
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
print(c(r,Quality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
print(c(r,Quality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
print(c(r,Quality))
maxQuality <- apply(RestFeatures[1:(r-1),], 1, sum)
maxQuality
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
maxQuality
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
N <- 4        # number of people in the group
ndim <- 3     # number of feature dimensions of the restaurants
nRest <- 100  # number of restaurants in town
D <- 0.1      # decay rate of criterion (people getting impatient)
rf <- rnorm(nRest*ndim, 0, 1)
RestFeatures <- matrix(rf, nrow=nRest, ncol=ndim)
crit <- rnorm(N*ndim, 0, 1)
Criteria <- matrix(crit, N, ndim)
### Everyone starts out with a strict policy: accept a restaurant only if it surpasses one's criteria on all 3 dimensions.
# With time, they get more hungry and impatient, so they lower the number of criteria that need to be met with decay rate D
### The group settles on a restaurant if everyone accepts it
Ncrit <- ndim  #number of criteria that must be met (initially)
ok <- matrix(0, 1, N)
accept <- 0
r <- 0
while (accept == 0) {
r <- r+1
for (s in 1:N) {
if (sum(sign(RestFeatures[r,] - Criteria[s,])) >= round(Ncrit))
{ok[s] <- 1} else {ok[s] <- 0}
}
if (sum(ok) == N) accept <- 1
if (r == nRest) accept <- 1
Ncrit <- Ncrit - D*Ncrit  # decay of criteria
}
Quality <- sum(RestFeatures[r])
maxQuality <- max(apply(RestFeatures[1:(r-1),], 1, sum))
print(c(r,Quality, maxQuality))
### Simulated Experiment (Elaborate Version)
nsubj <- 20
ntrials <- 100
noise <- 0.1
meanAbility <- rnorm(nsubj, 0, 1)   # ability is a normally distributed latent variable
effectA <- 0.1
effectB <- 0.15
# desired cell means on the probability scale
cellMeans <- c(0.5 - effectA/2 - effectB/2,
0.5 - effectA/2 + effectB/2,
0.5 + effectA/2 - effectB/2,
0.5 + effectA/2 + effectB/2)
cellMeans
g1 <- rnorm(5,0,1)
g2 <- rnorm(5,0,1)
t.test(g1,g2)
TT <- t.test(g1,g2)
summary(TT)
str(TT)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
x11()
plot(PC, DFR, type="p", xlim=c(0,01), ylim=c(0,1), xlab="PC(immediate)", ylab="PC(delayed)" )
require(graphics)
cars
Data <- as.data.frame(CL, PC, DFR)
Data <- data.frame(CL, PC, DFR)
View(Data)
x11()
plot(CL, PC, type="p", xlim=c(0.2,0.5), ylim=c(0,1), xlab="Cognitive Load", ylab="P(correct)" )
abline(coef(line(Data[,1:2])))
x11()
plot(CL, DFR, type="p", xlim=c(0.2,0.5), ylim=c(0,0.5), xlab="Cognitive Load", ylab="P(recall)" )
abline(coef(line(Data[,c(1,3)])))
x11()
plot(PC, DFR, type="p", xlim=c(0,01), ylim=c(0,1), xlab="PC(immediate)", ylab="PC(delayed)" )
abline(coef(line(Data[,c(2,3)])))
source('C:/Daten/R/Plots/Misc/VanessaElabRefreshing.R', echo=TRUE)
# Automatic update of R and its packages
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
source('C:/Daten/R/Toolbox/UpdateR.R', echo=TRUE)
source('C:/Daten/R/Plots/Refreshing/MetroRef/MetroRef1.R', echo=TRUE)
aggdat <- aggregate(reftime ~ condition+stimcat, data=data, FUN=mean)
aggdat
View(data)
rdata <- subset(data, reftime>0)  #data with actual responses (eliminate negatives)
aggdat <- aggregate(reftime ~ condition+stimcat, data=rdata, FUN=mean)
aggdat
aggdat.resp <- aggregate(response ~ condition+stimcat, data=data, FUN=mean)
aggdat.time <- aggregate(reftime ~ condition+stimcat, data=rdata, FUN=mean)
data$response <- data$reftime > 0 # whether a response was given at all in self-paced condition
aggdat.resp <- aggregate(response ~ condition+stimcat, data=data, FUN=mean)
aggdat.time <- aggregate(reftime ~ condition+stimcat, data=rdata, FUN=mean)
aggdata.resp
aggdat.resp
aggdat.time
source('C:/Daten/R/Plots/Refreshing/MetroRef/MetroRef1.R', echo=TRUE)
aggdat.resp
aggdat.time
spacebardata <- subset(data, condition==1)
x11()
hist(spacebardata$reftime)
metrodata <- subset(data, condition==2)
x11()
hist(metrodata$reftime)
source('C:/Daten/R/Bayes/Pairs.Binding/Pairs6_SamuelPawel.R', echo=TRUE)
correctdata
View(intrusiondata)
View(newdata)
View(olddata)
View(newdata)
correctdata$correct + intrusiondata$intrusion + olddata$old + newdata$new
RTdata
anovaRT
anovaCorrect
####### Figure 2: Setsize Effect on Accuracy #######
rm(list=ls())
graphics.off()
library("Hmisc")
library("readxl")
library("stats")
source(paste(dirname(getwd()), "/functions/plot.confint.R", sep=""))
source(paste(dirname(getwd()), "/functions/lineplot.ci.R", sep=""))
source(paste(dirname(getwd()), "/functions/Confint.R", sep=""))
source(paste(dirname(getwd()), "/functions/Bakeman.R", sep=""))
ptypes <- c(21:25, 21:25)
bgcolors <- c("black", "grey", "white", "grey80", "grey20", "black", "white")
# Load data for simple and complex span
d = read_excel("Unsworth.Engle.ListLength.xlsx")  # data from Unsworth & Engle 2006
wordspan <- d[,which(grepl("wor", colnames(d)))]
letterspan <- d[,which(grepl("let", colnames(d)))]
opspan <- d[,which(grepl("op", colnames(d)))]
rspan <- d[,which(grepl("rsp", colnames(d)))]
simplespan <- (wordspan + letterspan[,1:6])/2 #average the 2 simple spans for each subject and set size
complexspan <- (opspan + rspan)/2    #same for complex span
simple <- Confint(Bakeman(simplespan))
complex <- Confint(Bakeman(complexspan))
setwd("C:/Daten/R/Plots/BenchmarksWM.Data/BM1.1.SetsizeAccuracy")
####### Figure 2: Setsize Effect on Accuracy #######
rm(list=ls())
graphics.off()
library("Hmisc")
library("readxl")
library("stats")
source(paste(dirname(getwd()), "/functions/plot.confint.R", sep=""))
source(paste(dirname(getwd()), "/functions/lineplot.ci.R", sep=""))
source(paste(dirname(getwd()), "/functions/Confint.R", sep=""))
source(paste(dirname(getwd()), "/functions/Bakeman.R", sep=""))
ptypes <- c(21:25, 21:25)
bgcolors <- c("black", "grey", "white", "grey80", "grey20", "black", "white")
# Load data for simple and complex span
d = read_excel("Unsworth.Engle.ListLength.xlsx")  # data from Unsworth & Engle 2006
wordspan <- d[,which(grepl("wor", colnames(d)))]
letterspan <- d[,which(grepl("let", colnames(d)))]
opspan <- d[,which(grepl("op", colnames(d)))]
rspan <- d[,which(grepl("rsp", colnames(d)))]
simplespan <- (wordspan + letterspan[,1:6])/2 #average the 2 simple spans for each subject and set size
complexspan <- (opspan + rspan)/2    #same for complex span
simple <- Confint(Bakeman(simplespan))
complex <- Confint(Bakeman(complexspan))
View(d)
