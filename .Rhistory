spaspa$memory <- "spatial"
spaspa$processing <- "spatial"
verspa$memory <- "verbal"
verspa$processing <- "spatial"
spaver$memory <- "spatial"
spaver$processing <- "verbal"
vv <- gather(verver, key = "CL", value = "span", 2:4, factor_key = T)
ss <- gather(spaspa, key = "CL", value = "span", 2:4, factor_key = T)
vs <- gather(verspa, key = "CL", value = "span", 2:4, factor_key = T)
sv <- gather(spaver, key = "CL", value = "span", 2:4, factor_key = T)
vergauwe10 <- rbind(vv,ss,vs,sv)
levels(vergauwe10$CL)[levels(vergauwe10$CL) == "span low CL"] <- "low"
levels(vergauwe10$CL)[levels(vergauwe10$CL) == "span medium CL"] <- "medium"
levels(vergauwe10$CL)[levels(vergauwe10$CL) == "span high CL"] <- "high"
###
pro_1 <- read_excel(paste0(pth, "Vergauwe et al. 2010.xlsx"),
sheet = "verbal-verbal_processing", range = "A1:GL865")
pro_1l <- subset(pro_1, Procedure == "blockprocL")
pro_1l$acc <- rowMeans(pro_1l[,3:98], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,99:194], na.rm = T)
p1l <- pro_1l %>% select(sub, acc, rt)
p1l$CL <- "low"
pro_1l <- subset(pro_1, Procedure == "blockprocM")
pro_1l$acc <- rowMeans(pro_1l[,3:98], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,99:194], na.rm = T)
p1m <- pro_1l %>% select(sub, acc, rt)
p1m$CL <- "medium"
pro_1l <- subset(pro_1, Procedure == "blockprocH")
pro_1l$acc <- rowMeans(pro_1l[,3:98], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,99:194], na.rm = T)
p1h <- pro_1l %>% select(sub, acc, rt)
p1h$CL <- "high"
pl <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1l, FUN = mean)
pm <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1m, FUN = mean)
ph <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1h, FUN = mean)
pd <- rbind(pl,pm,ph)
id_vec <- sort(unique(vergauwe10$sub))
cls <- unique(levels(vergauwe10$CL))
dvv <- subset(vergauwe10, memory == "verbal" & processing == "verbal")
for (subj in id_vec) {
for (cl in cls) {
dvv$acc[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$acc[pd$sub == subj & pd$CL == cl]
dvv$rt[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$rt[pd$sub == subj & pd$CL == cl]
}
}
verg10 <- dvv
###
pro_1 <- read_excel(paste0(pth, "Vergauwe et al. 2010.xlsx"),
sheet = "spatial-spatial_processing", range = "A1:FF865")
pro_1l <- subset(pro_1, Procedure == "blockprocL")
pro_1l$acc <- rowMeans(pro_1l[,3:82], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,83:162], na.rm = T)
p1l <- pro_1l %>% select(sub, acc, rt)
p1l$CL <- "low"
pro_1l <- subset(pro_1, Procedure == "blockprocM")
pro_1l$acc <- rowMeans(pro_1l[,3:82], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,83:162], na.rm = T)
p1m <- pro_1l %>% select(sub, acc, rt)
p1m$CL <- "medium"
pro_1l <- subset(pro_1, Procedure == "blockprocH")
pro_1l$acc <- rowMeans(pro_1l[,3:82], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,83:162], na.rm = T)
p1h <- pro_1l %>% select(sub, acc, rt)
p1h$CL <- "high"
pl <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1l, FUN = mean)
pm <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1m, FUN = mean)
ph <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1h, FUN = mean)
pd <- rbind(pl,pm,ph)
id_vec <- sort(unique(vergauwe10$sub))
cls <- unique(levels(vergauwe10$CL))
dvv <- subset(vergauwe10, memory == "spatial" & processing == "spatial")
for (subj in id_vec) {
for (cl in cls) {
dvv$acc[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$acc[pd$sub == subj & pd$CL == cl]
dvv$rt[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$rt[pd$sub == subj & pd$CL == cl]
}
}
verg10 <- rbind(verg10,dvv)
###
pro_1 <- read_excel(paste0(pth, "Vergauwe et al. 2010.xlsx"),
sheet = "verbal-spatial_processing", range = "A1:GL865")
pro_1l <- subset(pro_1, Procedure == "blockprocL")
pro_1l$acc <- rowMeans(pro_1l[,3:98], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,99:194], na.rm = T)
p1l <- pro_1l %>% select(sub, acc, rt)
p1l$CL <- "low"
pro_1l <- subset(pro_1, Procedure == "blockprocM")
pro_1l$acc <- rowMeans(pro_1l[,3:98], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,99:194], na.rm = T)
p1m <- pro_1l %>% select(sub, acc, rt)
p1m$CL <- "medium"
pro_1l <- subset(pro_1, Procedure == "blockprocH")
pro_1l$acc <- rowMeans(pro_1l[,3:98], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,99:194], na.rm = T)
p1h <- pro_1l %>% select(sub, acc, rt)
p1h$CL <- "high"
pl <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1l, FUN = mean)
pm <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1m, FUN = mean)
ph <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1h, FUN = mean)
pd <- rbind(pl,pm,ph)
id_vec <- sort(unique(vergauwe10$sub))
cls <- unique(levels(vergauwe10$CL))
dvv <- subset(vergauwe10, memory == "verbal" & processing == "spatial")
for (subj in id_vec) {
for (cl in cls) {
dvv$acc[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$acc[pd$sub == subj & pd$CL == cl]
dvv$rt[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$rt[pd$sub == subj & pd$CL == cl]
}
}
verg10 <- rbind(verg10,dvv)
###
pro_1 <- read_excel(paste0(pth, "Vergauwe et al. 2010.xlsx"),
sheet = "spatial-verbal_processing", range = "A1:FF865")
pro_1l <- subset(pro_1, Procedure == "blockprocL")
pro_1l$acc <- rowMeans(pro_1l[,3:82], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,83:162], na.rm = T)
p1l <- pro_1l %>% select(sub, acc, rt)
p1l$CL <- "low"
pro_1l <- subset(pro_1, Procedure == "blockprocM")
pro_1l$acc <- rowMeans(pro_1l[,3:82], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,83:162], na.rm = T)
p1m <- pro_1l %>% select(sub, acc, rt)
p1m$CL <- "medium"
pro_1l <- subset(pro_1, Procedure == "blockprocH")
pro_1l$acc <- rowMeans(pro_1l[,3:82], na.rm = T)
pro_1l$rt <- rowMeans(pro_1l[,83:162], na.rm = T)
p1h <- pro_1l %>% select(sub, acc, rt)
p1h$CL <- "high"
pl <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1l, FUN = mean)
pm <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1m, FUN = mean)
ph <- aggregate(cbind(acc,rt) ~ sub+CL, data = p1h, FUN = mean)
pd <- rbind(pl,pm,ph)
id_vec <- sort(unique(vergauwe10$sub))
cls <- unique(levels(vergauwe10$CL))
dvv <- subset(vergauwe10, memory == "spatial" & processing == "verbal")
for (subj in id_vec) {
for (cl in cls) {
dvv$acc[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$acc[pd$sub == subj & pd$CL == cl]
dvv$rt[dvv$sub == subj & levels(dvv$CL) == cl] <- pd$rt[pd$sub == subj & pd$CL == cl]
}
}
verg10 <- rbind(verg10,dvv)
vergauwe10 <- verg10
vergauwe10 <- vergauwe10 %>% dplyr::rename(meanAcc = acc, meanRT = rt)
vergauwe10 <- vergauwe10 %>% dplyr::rename(subj = sub)
vergauwe10$totaltime <- 0
vergauwe10$totaltime <- 0
vergauwe10$totaltime[vergauwe10$CL == "low"] <- 8000
vergauwe10$totaltime[vergauwe10$CL == "medium"] <- 5172
vergauwe10$totaltime[vergauwe10$CL == "high"] <- 8000
names(vergauwe10)
vergauwe10f <- vergauwe10 %>%
group_by(memory, processing, CL) %>%
mutate(cogload = sum(meanRT)/totaltime)
aggregate(cbind(span, cogload) ~ CL + memory + processing, data = vergauwe10f, FUN = mean)
vergauwe10f <- vergauwe10 %>%
group_by(memory, processing, CL, subj) %>%
mutate(cogload = sum(meanRT)/totaltime)
aggregate(cbind(span, cogload) ~ CL + memory + processing, data = vergauwe10f, FUN = mean)
vergauwe10$totaltime[vergauwe10$CL == "low"] <- 2000
vergauwe10$totaltime[vergauwe10$CL == "medium"] <- 1293
vergauwe10$totaltime[vergauwe10$CL == "high"] <- 1000
vergauwe10$cogload <- vergauwe10$meanRT/vergauwe10$totaltime
aggregate(cbind(span, cogload) ~ CL + memory + processing, data = vergauwe10f, FUN = mean)
aggregate(cbind(span, cogload) ~ CL + memory + processing, data = vergauwe10, FUN = mean)
vergauwe10 <- vergauwe10 %>% select(subj, memory, processing, CL, totaltime, meanRT,
meanAcc, cogload, span)
save(vergauwe10, file = "./pkg/data/vergauwe10.rda")
pd <- aggregate(cbind(span, cogload) ~  CL + memory + processing, data = vergauwe10, FUN = mean)
plot(c(0.2,0.7), c(1.5,6.0), type = "n", xlab = "Total Procesing Time / Total Time",
ylab = "Mean Span", main = "Effects of Cognitive Load", xaxt = "n")
axis(side = 1, at = c(0.2,0.3,0.4,0.5,0.6,0.7), labels = T)
points(x = pd$cogload[pd$memory == "verbal" & pd$processing == "verbal"],
y = pd$span[pd$memory == "verbal" & pd$processing == "verbal"],
type = "p", pch = 15, col = "red")
abline(lm(span ~ cogload, data = pd[which(pd$memory == "verbal" &
pd$processing == "verbal"),])$coefficients,
lty = 1, pch = 15, col = "red")
points(x = pd$cogload[pd$memory == "verbal" & pd$processing == "spatial"],
y = pd$span[pd$memory == "verbal" & pd$processing == "spatial"],
type = "p", pch = 16, col = "blue")
abline(lm(span ~ cogload, data = pd[which(pd$memory == "verbal" &
pd$processing == "spatial"),])$coefficients,
lty = 2, pch = 16, col = "blue")
points(x = pd$cogload[pd$memory == "spatial" & pd$processing == "verbal"],
y = pd$span[pd$memory == "spatial" & pd$processing == "verbal"],
type = "p", pch = 17, col = "green")
abline(lm(span ~ cogload, data = pd[which(pd$memory == "spatial" &
pd$processing == "verbal"),])$coefficients,
lty = 3, pch = 17, col = "green")
points(x = pd$cogload[pd$memory == "spatial" & pd$processing == "spatial"],
y = pd$span[pd$memory == "spatial" & pd$processing == "spatial"],
type = "p", pch = 18, col = "black")
abline(lm(span ~ cogload, data = pd[which(pd$memory == "spatial" &
pd$processing == "spatial"),])$coefficients,
lty = 4, pch = 18, col = "black")
legend(0.2, 1.5, c("verbal-verbal", "verbal-spatial",
"spatial-verbal", "spatial-spatial"), lty = 1:4,
pch=15:18, col = c("red","blue","green","black"),
horiz = T, cex = 0.5, yjust = 0, xjust = 0)
load("~/Desktop/Doktorat I/Benchmarks Project Fix/BenchmarksWM/pkg/data/kane04.rda")
View(kane04)
load("~/Desktop/Doktorat I/Benchmarks Project Fix/BenchmarksWM/pkg/data/kane04t.rda")
View(kane04t)
kane04$word.span
kane04$word.span[kane04$subj == 1]
kane04$word.span[kane04$subj == 101]
aggregate(word.span ~ subj, kane04t[which(kane04t$subj == 101),], FUN = mean)
rm(list=ls())
############### BM12 Individual Differences #####################
pth  <- "BenchmarksWM.Data/BM12.1.PositiveManifold/"
# Read data
kane04 <- read_excel(paste0(pth,"Kane et al 2004, FINAL DATA for Benchmarks.xlsx"),
col_names=T, range="A4:AYS239")
View(kane04)
kane04 <- kane04[,1:26]
names(kane04) <- c("subj", "word.span", "letter.span", "digit.span", "ball.span",
"arrow.span", "matrix.span", "operation.span", "counting.span",
"reading.span", "navigation.span", "symmetry.span", "rotation.span",
"ets.inference", "paper.folding", "afq.analogies",
"dat.space.relations", "remote.associates", "afq.rotated.blocks",
"ets.nonsense.syllogisms", "ets.surface.development",
"afq.reading.comprehension", "ets.form.board", "wasi.matrices",
"raven.matrices", "beta3.matrices")
agg.long <- gather(aggdata, key = "task", value = "acc", 2:26)
agg.long <- gather(kane04, key = "task", value = "acc", 2:26)
# Read data
kane04 <- read_excel(paste0(pth,"Kane et al 2004, FINAL DATA for Benchmarks.xlsx"),
col_names=T, range="A4:AYS239")
aggdata <- kane04[,1:26]
names(aggdata) <- c("subj", "word.span", "letter.span", "digit.span", "ball.span",
"arrow.span", "matrix.span", "operation.span", "counting.span",
"reading.span", "navigation.span", "symmetry.span", "rotation.span",
"ets.inference", "paper.folding", "afq.analogies",
"dat.space.relations", "remote.associates", "afq.rotated.blocks",
"ets.nonsense.syllogisms", "ets.surface.development",
"afq.reading.comprehension", "ets.form.board", "wasi.matrices",
"raven.matrices", "beta3.matrices")
agg.long <- gather(aggdata, key = "task", value = "acc", 2:26)
agg.long$type <- ""
agg.long$type[agg.long$task %in% c("word span", "letter span", "digit span", "ball span",
"arrow span", "matrix span")] <- "STM"
agg.long$type[agg.long$task %in% c("operation span", "counting span",
"reading span", "navigation span", "symmetry span",
"rotation span")] <- "WM"
agg.long$type[agg.long$task %in% c("ets interference", "paper folding", "afq analogies",
"dat space relations", "remote associates",
"afq rotated blocks", "ets nonsense syllogisms",
"ets surface development", "afq reading comprehension",
"ets form board", "wasi matrices", "raven matrices",
"beta 3 matrices")] <- "reasoning"
kane04s <- agg.long %>% select(subj, type, task, acc)
View(kane04s)
agg.long$type[agg.long$task %in% c("word span", "letter span", "digit span", "ball span",
"arrow span", "matrix span")] <- "STM"
View(agg.long)
agg.long$type[agg.long$task %in% c("word.span", "letter.span", "digit.span", "ball.span", "arrow.span", "matrix.span")] <- "STM"
agg.long$type[agg.long$task %in% c("operation.span", "counting.span",
"reading.span", "navigation.span", "symmetry.span","rotation.span")] <- "WM"
unique(agg.long$task)
agg.long$type[agg.long$task %in% c("ets.inference", "paper.folding", "afq.analogies","dat.space.relations", "remote.associates","afq.rotated.blocks", "ets.nonsense.syllogisms", "ets.surface.development", "afq.reading.comprehension","ets.form.board", "wasi.matrices", "raven.matrices",
"beta3.matrices")] <- "reasoning"
kane04s <- agg.long %>% select(subj, type, task, acc)
## raw data STM tasks
darrow <- kane04[,c(1,27:86)]
dword <- kane04[,c(1,87:167)]
dmatspan <- kane04[,c(1,168:248)]
dletspan <- kane04[,c(1,249:353)]
dballspan <- kane04[,c(1,354:413)]
ddigspan <- kane04[,c(1,414:539)]
dopspan <- kane04[,c(1,540:581)]
dnavspan <- kane04[,c(1,582:623)]
dcountspan <- kane04[,c(1,624:683)]
dsymspan <- kane04[,c(1,684:725)]
dreadingspan <- kane04[,c(1,726:767)]
drotspan <- kane04[,c(1,768:809)]
topspan <- kane04[c(1,810:821)]
tnavspan <- kane04[c(1,822:833)]
tcountspan <- kane04[c(1,834:848)]
tsymspan <- kane04[c(1,849:860)]
treadingspan <- kane04[c(1,861:872)]
trotspan <- kane04[c(1,873:884)]
### change that for each
trotspan[,14:16] <- NA
names(trotspan)[14:16] <- c("ope13","ope14","ope15")
tarr <- kane04[c(1,885:899)]
twor <- kane04[c(1,900:917)]
tmat <- kane04[c(1,918:935)]
tlet <- kane04[c(1,936:956)]
tbal <- kane04[c(1,957:971)]
tdig <- kane04[c(1,972:992)]
dim(tdig)[2]
dd <- dim(tbal)[2]
tbal[,dim(tbal)[2]:22] <- NA
names(tbal)[dd:22] <- c("asd16","ope17","ope18","ert19","ewr20","wer21","har22")
topspan <- kane04[c(1,810:821)]
tnavspan <- kane04[c(1,822:833)]
tcountspan <- kane04[c(1,834:848)]
tsymspan <- kane04[c(1,849:860)]
treadingspan <- kane04[c(1,861:872)]
trotspan <- kane04[c(1,873:884)]
dim(topspan)[2]
dd <- dim(topspan)[2]
topspan[,dim(topspan)[2]:22] <- NA
names(topspan)[dd:22] <- c("asd16","ope17","ope18","ert19","ewr20","wer21","har22")
make_long <- function(data, name) {
d <- gather(data, key = "trial", value = "acc", 2:dim(data)[2])
d$trial <- as.numeric(substr(d$trial,4,5))
names(d)[names(d) == "acc"] <- name
return(d)
}
kane06cor <- make_long(tarr,"arrow.span")
wordsp <- make_long(twor, "word.span")
matsp <- make_long(tmat, "matrix.span")
letsp <- make_long(tlet, "letter.span")
balsp <- make_long(tbal, "ball.span")
digsp <- make_long(tdig, "digit.span")
opsp <- make_long(topspan, "operation.span")
opsp <- make_long(topspan, "operation.span")
View(topspan)
topspan <- kane04[c(1,810:821)]
opsp <- make_long(topspan, "operation.span")
tarr <- kane04[c(1,885:899)]
twor <- kane04[c(1,900:917)]
tmat <- kane04[c(1,918:935)]
tlet <- kane04[c(1,936:956)]
tbal <- kane04[c(1,957:971)]
tdig <- kane04[c(1,972:992)]
topspan <- kane04[c(1,810:821)]
tnavspan <- kane04[c(1,822:833)]
tcountspan <- kane04[c(1,834:848)]
tsymspan <- kane04[c(1,849:860)]
treadingspan <- kane04[c(1,861:872)]
trotspan <- kane04[c(1,873:884)]
make_long <- function(data, name) {
d <- gather(data, key = "trial", value = "acc", 2:dim(data)[2])
d$trial <- as.numeric(substr(d$trial,4,5))
names(d)[names(d) == "acc"] <- name
return(d)
}
kane06cor <- make_long(tarr,"arrow.span")
wordsp <- make_long(twor, "word.span")
matsp <- make_long(tmat, "matrix.span")
letsp <- make_long(tlet, "letter.span")
balsp <- make_long(tbal, "ball.span")
digsp <- make_long(tdig, "digit.span")
opsp <- make_long(topspan, "operation.span")
navsp <- make_long(tnavspan, "navigation.span")
countsp <- make_long(tcountspan, "counting.span")
symsp <- make_long(tsymspan, "symmetry.span")
redsp <- make_long(treadingspan, "reading.span")
rotsp <- make_long(trotspan, "rotation.span")
dfinal <- cbind(kane06cor, wordsp$word.span, matsp$matrix.span, letsp$letter.span,
balsp$ball.span, digsp$digit.span, opsp$operation.span,
navsp$navigation.span, countsp$counting.span, symsp$symmetry.span,
redsp$reading.span, rotsp$rotation.span)
View(tarr)
View(kane06cor)
load("~/Desktop/Doktorat I/Benchmarks Project Fix/BenchmarksWM/pkg/data/kane04t.rda")
View(kane04t)
tarr <- kane04[c(1,885:899)]
twor <- kane04[c(1,900:917)]
tmat <- kane04[c(1,918:935)]
tlet <- kane04[c(1,936:956)]
tbal <- kane04[c(1,957:971)]
tdig <- kane04[c(1,972:992)]
dim("tarr")[2]
dim(tarr)[2]
View(kane04)
dd
mc in dd:22
mc = 13
(mc-dd+1)
mc = 22
(mc-dd+1)
c_vec[i] <- paste0("abc", as.character(mc))
c_vec <- c()
i <- (mc-dd+1)
c_vec[i] <- paste0("abc", as.character(mc))
c_vec[i]
add_cells <- function(data) {
dd <- dim(data)[2]
data[,dd:22] <- NA
c_vec <- c()
for (mc in dd:22) {
i <- (mc-dd+1)
c_vec[i] <- paste0("abc", as.character(mc))
}
names(data)[dd:22] <- c_vec
}
add_cells(tarr)
add_cells(tarr)# dim(tarr)[2]
tarr <- kane04[c(1,885:899)]
twor <- kane04[c(1,900:917)]
tmat <- kane04[c(1,918:935)]
tlet <- kane04[c(1,936:956)]
tbal <- kane04[c(1,957:971)]
tdig <- kane04[c(1,972:992)]
add_cells(twor)
add_cells(tmat)
add_cells(tlet)
add_cells(tbal)
add_cells(tdig)
dim(tbal[2])
return(data)
add_cells <- function(data) {
dd <- dim(data)[2]
data[,dd:22] <- NA
c_vec <- c()
for (mc in dd:22) {
i <- (mc-dd+1)
c_vec[i] <- paste0("abc", as.character(mc))
}
names(data)[dd:22] <- c_vec
return(data)
}
add_cells(tarr)
add_cells(twor)
add_cells(tmat)
add_cells(tlet)
tarr <- kane04[c(1,885:899)]
twor <- kane04[c(1,900:917)]
tmat <- kane04[c(1,918:935)]
tlet <- kane04[c(1,936:956)]
tbal <- kane04[c(1,957:971)]
tdig <- kane04[c(1,972:992)]
add_cells <- function(data) {
dd <- dim(data)[2]
data[,dd:22] <- NA
c_vec <- c()
for (mc in dd:22) {
i <- (mc-dd+1)
c_vec[i] <- paste0("abc", as.character(mc))
}
names(data)[dd:22] <- c_vec
return(data)
}
tarr <- add_cells(tarr)
tarr
twor <- add_cells(twor)
tmat <- add_cells(tmat)
tlet <- add_cells(tlet)
tbal <- add_cells(tbal)
tdig <- add_cells(tdig)
dim(tarr)
dim(tbal)
topspan <- kane04[c(1,810:821)]
tnavspan <- kane04[c(1,822:833)]
tcountspan <- kane04[c(1,834:848)]
tsymspan <- kane04[c(1,849:860)]
treadingspan <- kane04[c(1,861:872)]
trotspan <- kane04[c(1,873:884)]
topspan <- add_cells(topspan)
tnavspan <- add_cells(tnavspan)
tcountspan <- add_cells(tcountspan)
tsymspan <- add_cells(tsymspan)
treadingspan <- add_cells(treadingspan)
trotspan <- add_cells(trotspan)
make_long <- function(data, name) {
d <- gather(data, key = "trial", value = "acc", 2:dim(data)[2])
d$trial <- as.numeric(substr(d$trial,4,5))
names(d)[names(d) == "acc"] <- name
return(d)
}
kane06cor <- make_long(tarr,"arrow.span")
wordsp <- make_long(twor, "word.span")
matsp <- make_long(tmat, "matrix.span")
letsp <- make_long(tlet, "letter.span")
balsp <- make_long(tbal, "ball.span")
digsp <- make_long(tdig, "digit.span")
opsp <- make_long(topspan, "operation.span")
navsp <- make_long(tnavspan, "navigation.span")
countsp <- make_long(tcountspan, "counting.span")
symsp <- make_long(tsymspan, "symmetry.span")
redsp <- make_long(treadingspan, "reading.span")
rotsp <- make_long(trotspan, "rotation.span")
dfinal <- cbind(kane06cor, wordsp$word.span, matsp$matrix.span, letsp$letter.span, balsp$ball.span, digsp$digit.span, opsp$operation.span, navsp$navigation.span, countsp$counting.span, symsp$symmetry.span, redsp$reading.span, rotsp$rotation.span)
kane04 <- dfinal %>% rename(subj = s_num, word.span = `wordsp$word.span`,
matrix.span = `matsp$matrix.span`,
letter.span = `letsp$letter.span`,
ball.span = `balsp$ball.span`, digit.span = `digsp$digit.span`,
operation.span = `opsp$operation.span`,
navigation.span = `navsp$navigation.span`,
counting.span = `countsp$counting.span`,
symmetry.span = `symsp$symmetry.span`,
reading.span = `redsp$reading.span`,
rotation.span = `rotsp$rotation.span`)
## 14:26 in aggdata
id_vec <- sort(unique(kane04$subj))
id_vec
View(kane04)
trial_vec <- sort(unique(kane04$trial))
kane04[,15:27] <- 0
for (ss in id_vec) {
for (tr in trial_vec) {
kane04[kane04$subj == ss & kane04$trial == tr,15:27] <- aggdata[aggdata$subj == ss,14:26]
}
}
names(kane04)[15:27] <- names(aggdata)[14:26]
check <- aggregate(cbind(arrow.span,word.span,matrix.span,letter.span,
ball.span) ~ subj, data = kane04, FUN = mean)
check
View(agg.long)
View(aggdata)
dim(aggdata)
dim(kane04)
names(kane04)
names(aggdata)
save(kane04, file = "./pkg/data/kane04.rda")
load("~/Desktop/Doktorat I/Benchmarks Project Fix/BenchmarksWM/pkg/data/healey14.rda")
View(healey14)
rm(list = ls())
